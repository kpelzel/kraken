// Code generated by go-swagger; DO NOT EDIT.

package pods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewStatsPodParams creates a new StatsPodParams object
// with the default values initialized.
func NewStatsPodParams() *StatsPodParams {
	var ()
	return &StatsPodParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewStatsPodParamsWithTimeout creates a new StatsPodParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewStatsPodParamsWithTimeout(timeout time.Duration) *StatsPodParams {
	var ()
	return &StatsPodParams{

		timeout: timeout,
	}
}

// NewStatsPodParamsWithContext creates a new StatsPodParams object
// with the default values initialized, and the ability to set a context for a request
func NewStatsPodParamsWithContext(ctx context.Context) *StatsPodParams {
	var ()
	return &StatsPodParams{

		Context: ctx,
	}
}

// NewStatsPodParamsWithHTTPClient creates a new StatsPodParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStatsPodParamsWithHTTPClient(client *http.Client) *StatsPodParams {
	var ()
	return &StatsPodParams{
		HTTPClient: client,
	}
}

/*StatsPodParams contains all the parameters to send to the API endpoint
for the stats pod operation typically these are written to a http.Request
*/
type StatsPodParams struct {

	/*All
	  Provide statistics for all running pods.

	*/
	All *bool
	/*NamesOrIDs
	  Names or IDs of pods.

	*/
	NamesOrIDs []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the stats pod params
func (o *StatsPodParams) WithTimeout(timeout time.Duration) *StatsPodParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the stats pod params
func (o *StatsPodParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the stats pod params
func (o *StatsPodParams) WithContext(ctx context.Context) *StatsPodParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the stats pod params
func (o *StatsPodParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the stats pod params
func (o *StatsPodParams) WithHTTPClient(client *http.Client) *StatsPodParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the stats pod params
func (o *StatsPodParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAll adds the all to the stats pod params
func (o *StatsPodParams) WithAll(all *bool) *StatsPodParams {
	o.SetAll(all)
	return o
}

// SetAll adds the all to the stats pod params
func (o *StatsPodParams) SetAll(all *bool) {
	o.All = all
}

// WithNamesOrIDs adds the namesOrIDs to the stats pod params
func (o *StatsPodParams) WithNamesOrIDs(namesOrIDs []string) *StatsPodParams {
	o.SetNamesOrIDs(namesOrIDs)
	return o
}

// SetNamesOrIDs adds the namesOrIDs to the stats pod params
func (o *StatsPodParams) SetNamesOrIDs(namesOrIDs []string) {
	o.NamesOrIDs = namesOrIDs
}

// WriteToRequest writes these params to a swagger request
func (o *StatsPodParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.All != nil {

		// query param all
		var qrAll bool
		if o.All != nil {
			qrAll = *o.All
		}
		qAll := swag.FormatBool(qrAll)
		if qAll != "" {
			if err := r.SetQueryParam("all", qAll); err != nil {
				return err
			}
		}

	}

	valuesNamesOrIDs := o.NamesOrIDs

	joinedNamesOrIDs := swag.JoinByFormat(valuesNamesOrIDs, "")
	// query array param namesOrIDs
	if err := r.SetQueryParam("namesOrIDs", joinedNamesOrIDs...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
