// Code generated by go-swagger; DO NOT EDIT.

package pods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewTopPodParams creates a new TopPodParams object
// with the default values initialized.
func NewTopPodParams() *TopPodParams {
	var (
		psArgsDefault = string("-ef")
		streamDefault = bool(true)
	)
	return &TopPodParams{
		PsArgs: &psArgsDefault,
		Stream: &streamDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewTopPodParamsWithTimeout creates a new TopPodParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewTopPodParamsWithTimeout(timeout time.Duration) *TopPodParams {
	var (
		psArgsDefault = string("-ef")
		streamDefault = bool(true)
	)
	return &TopPodParams{
		PsArgs: &psArgsDefault,
		Stream: &streamDefault,

		timeout: timeout,
	}
}

// NewTopPodParamsWithContext creates a new TopPodParams object
// with the default values initialized, and the ability to set a context for a request
func NewTopPodParamsWithContext(ctx context.Context) *TopPodParams {
	var (
		psArgsDefault = string("-ef")
		streamDefault = bool(true)
	)
	return &TopPodParams{
		PsArgs: &psArgsDefault,
		Stream: &streamDefault,

		Context: ctx,
	}
}

// NewTopPodParamsWithHTTPClient creates a new TopPodParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewTopPodParamsWithHTTPClient(client *http.Client) *TopPodParams {
	var (
		psArgsDefault = string("-ef")
		streamDefault = bool(true)
	)
	return &TopPodParams{
		PsArgs:     &psArgsDefault,
		Stream:     &streamDefault,
		HTTPClient: client,
	}
}

/*TopPodParams contains all the parameters to send to the API endpoint
for the top pod operation typically these are written to a http.Request
*/
type TopPodParams struct {

	/*Name
	  Name of pod to query for processes


	*/
	Name string
	/*PsArgs
	  arguments to pass to ps such as aux. Requires ps(1) to be installed in the container if no ps(1) compatible AIX descriptors are used.

	*/
	PsArgs *string
	/*Stream
	  Stream the output

	*/
	Stream *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the top pod params
func (o *TopPodParams) WithTimeout(timeout time.Duration) *TopPodParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the top pod params
func (o *TopPodParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the top pod params
func (o *TopPodParams) WithContext(ctx context.Context) *TopPodParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the top pod params
func (o *TopPodParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the top pod params
func (o *TopPodParams) WithHTTPClient(client *http.Client) *TopPodParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the top pod params
func (o *TopPodParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the top pod params
func (o *TopPodParams) WithName(name string) *TopPodParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the top pod params
func (o *TopPodParams) SetName(name string) {
	o.Name = name
}

// WithPsArgs adds the psArgs to the top pod params
func (o *TopPodParams) WithPsArgs(psArgs *string) *TopPodParams {
	o.SetPsArgs(psArgs)
	return o
}

// SetPsArgs adds the psArgs to the top pod params
func (o *TopPodParams) SetPsArgs(psArgs *string) {
	o.PsArgs = psArgs
}

// WithStream adds the stream to the top pod params
func (o *TopPodParams) WithStream(stream *bool) *TopPodParams {
	o.SetStream(stream)
	return o
}

// SetStream adds the stream to the top pod params
func (o *TopPodParams) SetStream(stream *bool) {
	o.Stream = stream
}

// WriteToRequest writes these params to a swagger request
func (o *TopPodParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.PsArgs != nil {

		// query param ps_args
		var qrPsArgs string
		if o.PsArgs != nil {
			qrPsArgs = *o.PsArgs
		}
		qPsArgs := qrPsArgs
		if qPsArgs != "" {
			if err := r.SetQueryParam("ps_args", qPsArgs); err != nil {
				return err
			}
		}

	}

	if o.Stream != nil {

		// query param stream
		var qrStream bool
		if o.Stream != nil {
			qrStream = *o.Stream
		}
		qStream := swag.FormatBool(qrStream)
		if qStream != "" {
			if err := r.SetQueryParam("stream", qStream); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
