// Code generated by go-swagger; DO NOT EDIT.

package pods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new pods API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for pods API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreatePod(params *CreatePodParams) (*CreatePodIDResponse, error)

	ListPods(params *ListPodsParams) (*ListPodsOK, error)

	PrunePods(params *PrunePodsParams) (*PrunePodsOK, error)

	InspectPod(params *InspectPodParams) (*InspectPodOK, error)

	KillPod(params *KillPodParams) (*KillPodOK, error)

	PausePod(params *PausePodParams) (*PausePodOK, error)

	PodExists(params *PodExistsParams) (*PodExistsNoContent, error)

	RemovePod(params *RemovePodParams) (*RemovePodOK, error)

	RestartPod(params *RestartPodParams) (*RestartPodOK, error)

	StartPod(params *StartPodParams) (*StartPodOK, error)

	StatsPod(params *StatsPodParams) (*StatsPodOK, error)

	StopPod(params *StopPodParams) (*StopPodOK, error)

	TopPod(params *TopPodParams) (*TopPodOK, error)

	UnpausePod(params *UnpausePodParams) (*UnpausePodOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreatePod creates a pod
*/
func (a *Client) CreatePod(params *CreatePodParams) (*CreatePodIDResponse, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreatePod",
		Method:             "POST",
		PathPattern:        "/libpod/pods/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreatePodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreatePodIDResponse)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreatePod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListPods lists pods
*/
func (a *Client) ListPods(params *ListPodsParams) (*ListPodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPodsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListPods",
		Method:             "GET",
		PathPattern:        "/libpod/pods/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListPodsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPodsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListPods: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PrunePods prunes unused pods
*/
func (a *Client) PrunePods(params *PrunePodsParams) (*PrunePodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrunePodsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PrunePods",
		Method:             "POST",
		PathPattern:        "/libpod/pods/prune",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PrunePodsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PrunePodsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PrunePods: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  InspectPod inspects pod
*/
func (a *Client) InspectPod(params *InspectPodParams) (*InspectPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInspectPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "inspectPod",
		Method:             "GET",
		PathPattern:        "/libpod/pods/{name}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InspectPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InspectPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for inspectPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  KillPod kills a pod
*/
func (a *Client) KillPod(params *KillPodParams) (*KillPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKillPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "killPod",
		Method:             "POST",
		PathPattern:        "/libpod/pods/{name}/kill",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KillPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KillPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for killPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PausePod pauses a pod

  Pause a pod
*/
func (a *Client) PausePod(params *PausePodParams) (*PausePodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPausePodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pausePod",
		Method:             "POST",
		PathPattern:        "/libpod/pods/{name}/pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PausePodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PausePodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pausePod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PodExists pods exists

  Check if a pod exists by name or ID
*/
func (a *Client) PodExists(params *PodExistsParams) (*PodExistsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPodExistsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "podExists",
		Method:             "GET",
		PathPattern:        "/libpod/pods/{name}/exists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PodExistsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PodExistsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for podExists: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemovePod removes pod
*/
func (a *Client) RemovePod(params *RemovePodParams) (*RemovePodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemovePodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removePod",
		Method:             "DELETE",
		PathPattern:        "/libpod/pods/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemovePodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemovePodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removePod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestartPod restarts a pod
*/
func (a *Client) RestartPod(params *RestartPodParams) (*RestartPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "restartPod",
		Method:             "POST",
		PathPattern:        "/libpod/pods/{name}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RestartPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestartPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restartPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartPod starts a pod
*/
func (a *Client) StartPod(params *StartPodParams) (*StartPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startPod",
		Method:             "POST",
		PathPattern:        "/libpod/pods/{name}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for startPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StatsPod gets stats for one or more pods

  Display a live stream of resource usage statistics for the containers in one or more pods
*/
func (a *Client) StatsPod(params *StatsPodParams) (*StatsPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatsPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "statsPod",
		Method:             "GET",
		PathPattern:        "/libpod/pods/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StatsPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatsPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for statsPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopPod stops a pod
*/
func (a *Client) StopPod(params *StopPodParams) (*StopPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopPod",
		Method:             "POST",
		PathPattern:        "/libpod/pods/{name}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TopPod lists processes

  List processes running inside a pod
*/
func (a *Client) TopPod(params *TopPodParams) (*TopPodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTopPodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "topPod",
		Method:             "GET",
		PathPattern:        "/libpod/pods/{name}/top",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TopPodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TopPodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for topPod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnpausePod unpauses a pod
*/
func (a *Client) UnpausePod(params *UnpausePodParams) (*UnpausePodOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnpausePodParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unpausePod",
		Method:             "POST",
		PathPattern:        "/libpod/pods/{name}/unpause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UnpausePodReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnpausePodOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unpausePod: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
