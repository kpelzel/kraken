// Code generated by go-swagger; DO NOT EDIT.

package pods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/hpc/kraken/modules/podman/models"
)

// InspectPodReader is a Reader for the InspectPod structure.
type InspectPodReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *InspectPodReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewInspectPodOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewInspectPodNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewInspectPodInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewInspectPodOK creates a InspectPodOK with default headers values
func NewInspectPodOK() *InspectPodOK {
	return &InspectPodOK{}
}

/*InspectPodOK handles this case with default header values.

Inspect pod
*/
type InspectPodOK struct {
	Payload *InspectPodOKBody
}

func (o *InspectPodOK) Error() string {
	return fmt.Sprintf("[GET /libpod/pods/{name}/json][%d] inspectPodOK  %+v", 200, o.Payload)
}

func (o *InspectPodOK) GetPayload() *InspectPodOKBody {
	return o.Payload
}

func (o *InspectPodOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(InspectPodOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInspectPodNotFound creates a InspectPodNotFound with default headers values
func NewInspectPodNotFound() *InspectPodNotFound {
	return &InspectPodNotFound{}
}

/*InspectPodNotFound handles this case with default header values.

No such pod
*/
type InspectPodNotFound struct {
	Payload *InspectPodNotFoundBody
}

func (o *InspectPodNotFound) Error() string {
	return fmt.Sprintf("[GET /libpod/pods/{name}/json][%d] inspectPodNotFound  %+v", 404, o.Payload)
}

func (o *InspectPodNotFound) GetPayload() *InspectPodNotFoundBody {
	return o.Payload
}

func (o *InspectPodNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(InspectPodNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewInspectPodInternalServerError creates a InspectPodInternalServerError with default headers values
func NewInspectPodInternalServerError() *InspectPodInternalServerError {
	return &InspectPodInternalServerError{}
}

/*InspectPodInternalServerError handles this case with default header values.

Internal server error
*/
type InspectPodInternalServerError struct {
	Payload *InspectPodInternalServerErrorBody
}

func (o *InspectPodInternalServerError) Error() string {
	return fmt.Sprintf("[GET /libpod/pods/{name}/json][%d] inspectPodInternalServerError  %+v", 500, o.Payload)
}

func (o *InspectPodInternalServerError) GetPayload() *InspectPodInternalServerErrorBody {
	return o.Payload
}

func (o *InspectPodInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(InspectPodInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*InspectPodInternalServerErrorBody inspect pod internal server error body
swagger:model InspectPodInternalServerErrorBody
*/
type InspectPodInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this inspect pod internal server error body
func (o *InspectPodInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this inspect pod internal server error body based on context it is used
func (o *InspectPodInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *InspectPodInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InspectPodInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res InspectPodInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*InspectPodNotFoundBody inspect pod not found body
swagger:model InspectPodNotFoundBody
*/
type InspectPodNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this inspect pod not found body
func (o *InspectPodNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this inspect pod not found body based on context it is used
func (o *InspectPodNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *InspectPodNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InspectPodNotFoundBody) UnmarshalBinary(b []byte) error {
	var res InspectPodNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*InspectPodOKBody inspect pod o k body
swagger:model InspectPodOKBody
*/
type InspectPodOKBody struct {

	// CgroupParent is the parent of the pod's CGroup.
	CgroupParent string `json:"CgroupParent,omitempty"`

	// CgroupPath is the path to the pod's CGroup.
	CgroupPath string `json:"CgroupPath,omitempty"`

	// Containers gives a brief summary of all containers in the pod and
	// their current status.
	Containers []*models.InspectPodContainerInfo `json:"Containers"`

	// CreateCgroup is whether this pod will create its own CGroup to group
	// containers under.
	CreateCgroup bool `json:"CreateCgroup,omitempty"`

	// CreateCommand is the full command plus arguments of the process the
	// container has been created with.
	CreateCommand []string `json:"CreateCommand"`

	// CreateInfra is whether this pod will create an infra container to
	// share namespaces.
	CreateInfra bool `json:"CreateInfra,omitempty"`

	// Created is the time when the pod was created.
	// Format: date-time
	Created strfmt.DateTime `json:"Created,omitempty"`

	// Hostname is the hostname that the pod will set.
	Hostname string `json:"Hostname,omitempty"`

	// ID is the ID of the pod.
	ID string `json:"Id,omitempty"`

	// infra config
	InfraConfig *models.InspectPodInfraConfig `json:"InfraConfig,omitempty"`

	// InfraContainerID is the ID of the pod's infra container, if one is
	// present.
	InfraContainerID string `json:"InfraContainerID,omitempty"`

	// Labels is a set of key-value labels that have been applied to the
	// pod.
	Labels map[string]string `json:"Labels,omitempty"`

	// Name is the name of the pod.
	Name string `json:"Name,omitempty"`

	// Namespace is the Libpod namespace the pod is placed in.
	Namespace string `json:"Namespace,omitempty"`

	// NumContainers is the number of containers in the pod, including the
	// infra container.
	NumContainers uint64 `json:"NumContainers,omitempty"`

	// SharedNamespaces contains a list of namespaces that will be shared by
	// containers within the pod. Can only be set if CreateInfra is true.
	SharedNamespaces []string `json:"SharedNamespaces"`

	// State represents the current state of the pod.
	State string `json:"State,omitempty"`
}

// Validate validates this inspect pod o k body
func (o *InspectPodOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateInfraConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *InspectPodOKBody) validateContainers(formats strfmt.Registry) error {
	if swag.IsZero(o.Containers) { // not required
		return nil
	}

	for i := 0; i < len(o.Containers); i++ {
		if swag.IsZero(o.Containers[i]) { // not required
			continue
		}

		if o.Containers[i] != nil {
			if err := o.Containers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inspectPodOK" + "." + "Containers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *InspectPodOKBody) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("inspectPodOK"+"."+"Created", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *InspectPodOKBody) validateInfraConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.InfraConfig) { // not required
		return nil
	}

	if o.InfraConfig != nil {
		if err := o.InfraConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inspectPodOK" + "." + "InfraConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this inspect pod o k body based on the context it is used
func (o *InspectPodOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateContainers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateInfraConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *InspectPodOKBody) contextValidateContainers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Containers); i++ {

		if o.Containers[i] != nil {
			if err := o.Containers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inspectPodOK" + "." + "Containers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *InspectPodOKBody) contextValidateInfraConfig(ctx context.Context, formats strfmt.Registry) error {

	if o.InfraConfig != nil {
		if err := o.InfraConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inspectPodOK" + "." + "InfraConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *InspectPodOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *InspectPodOKBody) UnmarshalBinary(b []byte) error {
	var res InspectPodOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
