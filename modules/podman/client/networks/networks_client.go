// Code generated by go-swagger; DO NOT EDIT.

package networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new networks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for networks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	LibpodCreateNetwork(params *LibpodCreateNetworkParams) (*LibpodCreateNetworkOK, error)

	LibpodInspectNetwork(params *LibpodInspectNetworkParams) (*LibpodInspectNetworkOK, error)

	LibpodListNetwork(params *LibpodListNetworkParams) (*LibpodListNetworkOK, error)

	LibpodRemoveNetwork(params *LibpodRemoveNetworkParams) (*LibpodRemoveNetworkOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  LibpodCreateNetwork creates network

  Create a new CNI network configuration
*/
func (a *Client) LibpodCreateNetwork(params *LibpodCreateNetworkParams) (*LibpodCreateNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodCreateNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodCreateNetwork",
		Method:             "POST",
		PathPattern:        "/libpod/networks/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodCreateNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodCreateNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodCreateNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodInspectNetwork inspects a network

  Display low level configuration for a CNI network
*/
func (a *Client) LibpodInspectNetwork(params *LibpodInspectNetworkParams) (*LibpodInspectNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodInspectNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodInspectNetwork",
		Method:             "GET",
		PathPattern:        "/libpod/networks/{name}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodInspectNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodInspectNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodInspectNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodListNetwork lists networks

  Display summary of network configurations
*/
func (a *Client) LibpodListNetwork(params *LibpodListNetworkParams) (*LibpodListNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodListNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodListNetwork",
		Method:             "GET",
		PathPattern:        "/libpod/networks/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodListNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodListNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodListNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodRemoveNetwork removes a network

  Remove a CNI configured network
*/
func (a *Client) LibpodRemoveNetwork(params *LibpodRemoveNetworkParams) (*LibpodRemoveNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodRemoveNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodRemoveNetwork",
		Method:             "DELETE",
		PathPattern:        "/libpod/networks/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodRemoveNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodRemoveNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodRemoveNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
