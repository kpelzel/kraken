// Code generated by go-swagger; DO NOT EDIT.

package system_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/hpc/kraken/modules/podman/models"
)

// CompatSystemVersionReader is a Reader for the CompatSystemVersion structure.
type CompatSystemVersionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CompatSystemVersionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCompatSystemVersionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCompatSystemVersionOK creates a CompatSystemVersionOK with default headers values
func NewCompatSystemVersionOK() *CompatSystemVersionOK {
	return &CompatSystemVersionOK{}
}

/*CompatSystemVersionOK handles this case with default header values.

Version
*/
type CompatSystemVersionOK struct {
	Payload *CompatSystemVersionOKBody
}

func (o *CompatSystemVersionOK) Error() string {
	return fmt.Sprintf("[GET /version][%d] compatSystemVersionOK  %+v", 200, o.Payload)
}

func (o *CompatSystemVersionOK) GetPayload() *CompatSystemVersionOKBody {
	return o.Payload
}

func (o *CompatSystemVersionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CompatSystemVersionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CompatSystemVersionOKBody compat system version o k body
swagger:model CompatSystemVersionOKBody
*/
type CompatSystemVersionOKBody struct {

	// client
	Client *models.Version `json:"Client,omitempty"`

	// server
	Server *models.Version `json:"Server,omitempty"`
}

// Validate validates this compat system version o k body
func (o *CompatSystemVersionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateClient(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CompatSystemVersionOKBody) validateClient(formats strfmt.Registry) error {
	if swag.IsZero(o.Client) { // not required
		return nil
	}

	if o.Client != nil {
		if err := o.Client.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compatSystemVersionOK" + "." + "Client")
			}
			return err
		}
	}

	return nil
}

func (o *CompatSystemVersionOKBody) validateServer(formats strfmt.Registry) error {
	if swag.IsZero(o.Server) { // not required
		return nil
	}

	if o.Server != nil {
		if err := o.Server.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compatSystemVersionOK" + "." + "Server")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this compat system version o k body based on the context it is used
func (o *CompatSystemVersionOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateClient(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateServer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CompatSystemVersionOKBody) contextValidateClient(ctx context.Context, formats strfmt.Registry) error {

	if o.Client != nil {
		if err := o.Client.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compatSystemVersionOK" + "." + "Client")
			}
			return err
		}
	}

	return nil
}

func (o *CompatSystemVersionOKBody) contextValidateServer(ctx context.Context, formats strfmt.Registry) error {

	if o.Server != nil {
		if err := o.Server.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("compatSystemVersionOK" + "." + "Server")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CompatSystemVersionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CompatSystemVersionOKBody) UnmarshalBinary(b []byte) error {
	var res CompatSystemVersionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
