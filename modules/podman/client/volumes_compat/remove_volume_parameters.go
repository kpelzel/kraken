// Code generated by go-swagger; DO NOT EDIT.

package volumes_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRemoveVolumeParams creates a new RemoveVolumeParams object
// with the default values initialized.
func NewRemoveVolumeParams() *RemoveVolumeParams {
	var ()
	return &RemoveVolumeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveVolumeParamsWithTimeout creates a new RemoveVolumeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRemoveVolumeParamsWithTimeout(timeout time.Duration) *RemoveVolumeParams {
	var ()
	return &RemoveVolumeParams{

		timeout: timeout,
	}
}

// NewRemoveVolumeParamsWithContext creates a new RemoveVolumeParams object
// with the default values initialized, and the ability to set a context for a request
func NewRemoveVolumeParamsWithContext(ctx context.Context) *RemoveVolumeParams {
	var ()
	return &RemoveVolumeParams{

		Context: ctx,
	}
}

// NewRemoveVolumeParamsWithHTTPClient creates a new RemoveVolumeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRemoveVolumeParamsWithHTTPClient(client *http.Client) *RemoveVolumeParams {
	var ()
	return &RemoveVolumeParams{
		HTTPClient: client,
	}
}

/*RemoveVolumeParams contains all the parameters to send to the API endpoint
for the remove volume operation typically these are written to a http.Request
*/
type RemoveVolumeParams struct {

	/*Force
	  Force removal of the volume. This actually only causes errors due
	to the names volume not being found to be suppressed, which is the
	behaviour Docker implements.


	*/
	Force *bool
	/*Name
	  the name or ID of the volume

	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the remove volume params
func (o *RemoveVolumeParams) WithTimeout(timeout time.Duration) *RemoveVolumeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove volume params
func (o *RemoveVolumeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove volume params
func (o *RemoveVolumeParams) WithContext(ctx context.Context) *RemoveVolumeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove volume params
func (o *RemoveVolumeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove volume params
func (o *RemoveVolumeParams) WithHTTPClient(client *http.Client) *RemoveVolumeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove volume params
func (o *RemoveVolumeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForce adds the force to the remove volume params
func (o *RemoveVolumeParams) WithForce(force *bool) *RemoveVolumeParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the remove volume params
func (o *RemoveVolumeParams) SetForce(force *bool) {
	o.Force = force
}

// WithName adds the name to the remove volume params
func (o *RemoveVolumeParams) WithName(name string) *RemoveVolumeParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the remove volume params
func (o *RemoveVolumeParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveVolumeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Force != nil {

		// query param force
		var qrForce bool
		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {
			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
