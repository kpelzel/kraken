// Code generated by go-swagger; DO NOT EDIT.

package volumes_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/hpc/kraken/modules/podman/models"
)

// ListVolumesReader is a Reader for the ListVolumes structure.
type ListVolumesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListVolumesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListVolumesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewListVolumesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListVolumesOK creates a ListVolumesOK with default headers values
func NewListVolumesOK() *ListVolumesOK {
	return &ListVolumesOK{}
}

/*ListVolumesOK handles this case with default header values.

Volume list response
*/
type ListVolumesOK struct {
	Payload *ListVolumesOKBody
}

func (o *ListVolumesOK) Error() string {
	return fmt.Sprintf("[GET /volumes][%d] listVolumesOK  %+v", 200, o.Payload)
}

func (o *ListVolumesOK) GetPayload() *ListVolumesOKBody {
	return o.Payload
}

func (o *ListVolumesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListVolumesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVolumesInternalServerError creates a ListVolumesInternalServerError with default headers values
func NewListVolumesInternalServerError() *ListVolumesInternalServerError {
	return &ListVolumesInternalServerError{}
}

/*ListVolumesInternalServerError handles this case with default header values.

Internal server error
*/
type ListVolumesInternalServerError struct {
	Payload *ListVolumesInternalServerErrorBody
}

func (o *ListVolumesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /volumes][%d] listVolumesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListVolumesInternalServerError) GetPayload() *ListVolumesInternalServerErrorBody {
	return o.Payload
}

func (o *ListVolumesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListVolumesInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*ListVolumesInternalServerErrorBody list volumes internal server error body
swagger:model ListVolumesInternalServerErrorBody
*/
type ListVolumesInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this list volumes internal server error body
func (o *ListVolumesInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this list volumes internal server error body based on context it is used
func (o *ListVolumesInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *ListVolumesInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListVolumesInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res ListVolumesInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*ListVolumesOKBody list volumes o k body
swagger:model ListVolumesOKBody
*/
type ListVolumesOKBody struct {

	// volumes
	Volumes []*models.VolumeInfo `json:"Volumes"`
}

// Validate validates this list volumes o k body
func (o *ListVolumesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListVolumesOKBody) validateVolumes(formats strfmt.Registry) error {
	if swag.IsZero(o.Volumes) { // not required
		return nil
	}

	for i := 0; i < len(o.Volumes); i++ {
		if swag.IsZero(o.Volumes[i]) { // not required
			continue
		}

		if o.Volumes[i] != nil {
			if err := o.Volumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listVolumesOK" + "." + "Volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this list volumes o k body based on the context it is used
func (o *ListVolumesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListVolumesOKBody) contextValidateVolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Volumes); i++ {

		if o.Volumes[i] != nil {
			if err := o.Volumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listVolumesOK" + "." + "Volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListVolumesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListVolumesOKBody) UnmarshalBinary(b []byte) error {
	var res ListVolumesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
