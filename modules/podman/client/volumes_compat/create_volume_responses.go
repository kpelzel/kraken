// Code generated by go-swagger; DO NOT EDIT.

package volumes_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/hpc/kraken/modules/podman/models"
)

// CreateVolumeReader is a Reader for the CreateVolume structure.
type CreateVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateVolumeCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewCreateVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateVolumeCreated creates a CreateVolumeCreated with default headers values
func NewCreateVolumeCreated() *CreateVolumeCreated {
	return &CreateVolumeCreated{}
}

/*CreateVolumeCreated handles this case with default header values.

This response definition is used for both the create and inspect endpoints
*/
type CreateVolumeCreated struct {
	Payload *CreateVolumeCreatedBody
}

func (o *CreateVolumeCreated) Error() string {
	return fmt.Sprintf("[POST /volumes/create][%d] createVolumeCreated  %+v", 201, o.Payload)
}

func (o *CreateVolumeCreated) GetPayload() *CreateVolumeCreatedBody {
	return o.Payload
}

func (o *CreateVolumeCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateVolumeCreatedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateVolumeInternalServerError creates a CreateVolumeInternalServerError with default headers values
func NewCreateVolumeInternalServerError() *CreateVolumeInternalServerError {
	return &CreateVolumeInternalServerError{}
}

/*CreateVolumeInternalServerError handles this case with default header values.

Internal server error
*/
type CreateVolumeInternalServerError struct {
	Payload *CreateVolumeInternalServerErrorBody
}

func (o *CreateVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /volumes/create][%d] createVolumeInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateVolumeInternalServerError) GetPayload() *CreateVolumeInternalServerErrorBody {
	return o.Payload
}

func (o *CreateVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateVolumeInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateVolumeCreatedBody create volume created body
swagger:model CreateVolumeCreatedBody
*/
type CreateVolumeCreatedBody struct {

	// Date/Time the volume was created.
	CreatedAt string `json:"CreatedAt,omitempty"`

	// Name of the volume driver used by the volume.
	// Required: true
	Driver *string `json:"Driver"`

	// User-defined key/value metadata.
	// Required: true
	Labels map[string]string `json:"Labels"`

	// Mount path of the volume on the host.
	// Required: true
	Mountpoint *string `json:"Mountpoint"`

	// Name of the volume.
	// Required: true
	Name *string `json:"Name"`

	// The driver specific options used when creating the volume.
	// Required: true
	Options map[string]string `json:"Options"`

	// The level at which the volume exists. Either `global` for cluster-wide,
	// or `local` for machine level.
	// Required: true
	Scope *string `json:"Scope"`

	// Low-level details about the volume, provided by the volume driver.
	// Details are returned as a map with key/value pairs:
	// `{"key":"value","key2":"value2"}`.
	//
	// The `Status` field is optional, and is omitted if the volume driver
	// does not support this feature.
	Status map[string]interface{} `json:"Status,omitempty"`

	// usage data
	UsageData *models.VolumeUsageData `json:"UsageData,omitempty"`
}

// Validate validates this create volume created body
func (o *CreateVolumeCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDriver(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateLabels(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMountpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsageData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateVolumeCreatedBody) validateDriver(formats strfmt.Registry) error {

	if err := validate.Required("createVolumeCreated"+"."+"Driver", "body", o.Driver); err != nil {
		return err
	}

	return nil
}

func (o *CreateVolumeCreatedBody) validateLabels(formats strfmt.Registry) error {

	if err := validate.Required("createVolumeCreated"+"."+"Labels", "body", o.Labels); err != nil {
		return err
	}

	return nil
}

func (o *CreateVolumeCreatedBody) validateMountpoint(formats strfmt.Registry) error {

	if err := validate.Required("createVolumeCreated"+"."+"Mountpoint", "body", o.Mountpoint); err != nil {
		return err
	}

	return nil
}

func (o *CreateVolumeCreatedBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("createVolumeCreated"+"."+"Name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

func (o *CreateVolumeCreatedBody) validateOptions(formats strfmt.Registry) error {

	if err := validate.Required("createVolumeCreated"+"."+"Options", "body", o.Options); err != nil {
		return err
	}

	return nil
}

func (o *CreateVolumeCreatedBody) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("createVolumeCreated"+"."+"Scope", "body", o.Scope); err != nil {
		return err
	}

	return nil
}

func (o *CreateVolumeCreatedBody) validateUsageData(formats strfmt.Registry) error {
	if swag.IsZero(o.UsageData) { // not required
		return nil
	}

	if o.UsageData != nil {
		if err := o.UsageData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createVolumeCreated" + "." + "UsageData")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create volume created body based on the context it is used
func (o *CreateVolumeCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateUsageData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateVolumeCreatedBody) contextValidateUsageData(ctx context.Context, formats strfmt.Registry) error {

	if o.UsageData != nil {
		if err := o.UsageData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createVolumeCreated" + "." + "UsageData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateVolumeCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateVolumeCreatedBody) UnmarshalBinary(b []byte) error {
	var res CreateVolumeCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*CreateVolumeInternalServerErrorBody create volume internal server error body
swagger:model CreateVolumeInternalServerErrorBody
*/
type CreateVolumeInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this create volume internal server error body
func (o *CreateVolumeInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this create volume internal server error body based on context it is used
func (o *CreateVolumeInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *CreateVolumeInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateVolumeInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res CreateVolumeInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
