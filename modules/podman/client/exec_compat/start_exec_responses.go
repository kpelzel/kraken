// Code generated by go-swagger; DO NOT EDIT.

package exec_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StartExecReader is a Reader for the StartExec structure.
type StartExecReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *StartExecReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewStartExecOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewStartExecNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewStartExecConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewStartExecInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewStartExecOK creates a StartExecOK with default headers values
func NewStartExecOK() *StartExecOK {
	return &StartExecOK{}
}

/*StartExecOK handles this case with default header values.

no error
*/
type StartExecOK struct {
}

func (o *StartExecOK) Error() string {
	return fmt.Sprintf("[POST /exec/{id}/start][%d] startExecOK ", 200)
}

func (o *StartExecOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartExecNotFound creates a StartExecNotFound with default headers values
func NewStartExecNotFound() *StartExecNotFound {
	return &StartExecNotFound{}
}

/*StartExecNotFound handles this case with default header values.

No such exec instance
*/
type StartExecNotFound struct {
	Payload *StartExecNotFoundBody
}

func (o *StartExecNotFound) Error() string {
	return fmt.Sprintf("[POST /exec/{id}/start][%d] startExecNotFound  %+v", 404, o.Payload)
}

func (o *StartExecNotFound) GetPayload() *StartExecNotFoundBody {
	return o.Payload
}

func (o *StartExecNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StartExecNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewStartExecConflict creates a StartExecConflict with default headers values
func NewStartExecConflict() *StartExecConflict {
	return &StartExecConflict{}
}

/*StartExecConflict handles this case with default header values.

container is not running
*/
type StartExecConflict struct {
}

func (o *StartExecConflict) Error() string {
	return fmt.Sprintf("[POST /exec/{id}/start][%d] startExecConflict ", 409)
}

func (o *StartExecConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewStartExecInternalServerError creates a StartExecInternalServerError with default headers values
func NewStartExecInternalServerError() *StartExecInternalServerError {
	return &StartExecInternalServerError{}
}

/*StartExecInternalServerError handles this case with default header values.

Internal server error
*/
type StartExecInternalServerError struct {
	Payload *StartExecInternalServerErrorBody
}

func (o *StartExecInternalServerError) Error() string {
	return fmt.Sprintf("[POST /exec/{id}/start][%d] startExecInternalServerError  %+v", 500, o.Payload)
}

func (o *StartExecInternalServerError) GetPayload() *StartExecInternalServerErrorBody {
	return o.Payload
}

func (o *StartExecInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(StartExecInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*StartExecBody start exec body
swagger:model StartExecBody
*/
type StartExecBody struct {

	// Detach from the command. Not presently supported.
	Detach bool `json:"Detach,omitempty"`

	// Allocate a pseudo-TTY. Presently ignored.
	Tty bool `json:"Tty,omitempty"`
}

// Validate validates this start exec body
func (o *StartExecBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start exec body based on context it is used
func (o *StartExecBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartExecBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartExecBody) UnmarshalBinary(b []byte) error {
	var res StartExecBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StartExecInternalServerErrorBody start exec internal server error body
swagger:model StartExecInternalServerErrorBody
*/
type StartExecInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this start exec internal server error body
func (o *StartExecInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start exec internal server error body based on context it is used
func (o *StartExecInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartExecInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartExecInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res StartExecInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*StartExecNotFoundBody start exec not found body
swagger:model StartExecNotFoundBody
*/
type StartExecNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this start exec not found body
func (o *StartExecNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this start exec not found body based on context it is used
func (o *StartExecNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *StartExecNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *StartExecNotFoundBody) UnmarshalBinary(b []byte) error {
	var res StartExecNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
