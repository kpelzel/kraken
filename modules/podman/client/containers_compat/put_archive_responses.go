// Code generated by go-swagger; DO NOT EDIT.

package containers_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PutArchiveReader is a Reader for the PutArchive structure.
type PutArchiveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutArchiveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutArchiveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutArchiveBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutArchiveForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutArchiveNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutArchiveInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutArchiveOK creates a PutArchiveOK with default headers values
func NewPutArchiveOK() *PutArchiveOK {
	return &PutArchiveOK{}
}

/*PutArchiveOK handles this case with default header values.

no error
*/
type PutArchiveOK struct {
}

func (o *PutArchiveOK) Error() string {
	return fmt.Sprintf("[PUT /containers/{name}/archive][%d] putArchiveOK ", 200)
}

func (o *PutArchiveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutArchiveBadRequest creates a PutArchiveBadRequest with default headers values
func NewPutArchiveBadRequest() *PutArchiveBadRequest {
	return &PutArchiveBadRequest{}
}

/*PutArchiveBadRequest handles this case with default header values.

Bad parameter in request
*/
type PutArchiveBadRequest struct {
	Payload *PutArchiveBadRequestBody
}

func (o *PutArchiveBadRequest) Error() string {
	return fmt.Sprintf("[PUT /containers/{name}/archive][%d] putArchiveBadRequest  %+v", 400, o.Payload)
}

func (o *PutArchiveBadRequest) GetPayload() *PutArchiveBadRequestBody {
	return o.Payload
}

func (o *PutArchiveBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutArchiveBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutArchiveForbidden creates a PutArchiveForbidden with default headers values
func NewPutArchiveForbidden() *PutArchiveForbidden {
	return &PutArchiveForbidden{}
}

/*PutArchiveForbidden handles this case with default header values.

the container rootfs is read-only
*/
type PutArchiveForbidden struct {
}

func (o *PutArchiveForbidden) Error() string {
	return fmt.Sprintf("[PUT /containers/{name}/archive][%d] putArchiveForbidden ", 403)
}

func (o *PutArchiveForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPutArchiveNotFound creates a PutArchiveNotFound with default headers values
func NewPutArchiveNotFound() *PutArchiveNotFound {
	return &PutArchiveNotFound{}
}

/*PutArchiveNotFound handles this case with default header values.

No such container
*/
type PutArchiveNotFound struct {
	Payload *PutArchiveNotFoundBody
}

func (o *PutArchiveNotFound) Error() string {
	return fmt.Sprintf("[PUT /containers/{name}/archive][%d] putArchiveNotFound  %+v", 404, o.Payload)
}

func (o *PutArchiveNotFound) GetPayload() *PutArchiveNotFoundBody {
	return o.Payload
}

func (o *PutArchiveNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutArchiveNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutArchiveInternalServerError creates a PutArchiveInternalServerError with default headers values
func NewPutArchiveInternalServerError() *PutArchiveInternalServerError {
	return &PutArchiveInternalServerError{}
}

/*PutArchiveInternalServerError handles this case with default header values.

Internal server error
*/
type PutArchiveInternalServerError struct {
	Payload *PutArchiveInternalServerErrorBody
}

func (o *PutArchiveInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /containers/{name}/archive][%d] putArchiveInternalServerError  %+v", 500, o.Payload)
}

func (o *PutArchiveInternalServerError) GetPayload() *PutArchiveInternalServerErrorBody {
	return o.Payload
}

func (o *PutArchiveInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PutArchiveInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PutArchiveBadRequestBody put archive bad request body
swagger:model PutArchiveBadRequestBody
*/
type PutArchiveBadRequestBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this put archive bad request body
func (o *PutArchiveBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put archive bad request body based on context it is used
func (o *PutArchiveBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutArchiveBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutArchiveBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PutArchiveBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutArchiveInternalServerErrorBody put archive internal server error body
swagger:model PutArchiveInternalServerErrorBody
*/
type PutArchiveInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this put archive internal server error body
func (o *PutArchiveInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put archive internal server error body based on context it is used
func (o *PutArchiveInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutArchiveInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutArchiveInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PutArchiveInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PutArchiveNotFoundBody put archive not found body
swagger:model PutArchiveNotFoundBody
*/
type PutArchiveNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this put archive not found body
func (o *PutArchiveNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this put archive not found body based on context it is used
func (o *PutArchiveNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutArchiveNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutArchiveNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PutArchiveNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
