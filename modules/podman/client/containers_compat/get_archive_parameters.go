// Code generated by go-swagger; DO NOT EDIT.

package containers_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetArchiveParams creates a new GetArchiveParams object
// with the default values initialized.
func NewGetArchiveParams() *GetArchiveParams {
	var ()
	return &GetArchiveParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetArchiveParamsWithTimeout creates a new GetArchiveParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetArchiveParamsWithTimeout(timeout time.Duration) *GetArchiveParams {
	var ()
	return &GetArchiveParams{

		timeout: timeout,
	}
}

// NewGetArchiveParamsWithContext creates a new GetArchiveParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetArchiveParamsWithContext(ctx context.Context) *GetArchiveParams {
	var ()
	return &GetArchiveParams{

		Context: ctx,
	}
}

// NewGetArchiveParamsWithHTTPClient creates a new GetArchiveParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetArchiveParamsWithHTTPClient(client *http.Client) *GetArchiveParams {
	var ()
	return &GetArchiveParams{
		HTTPClient: client,
	}
}

/*GetArchiveParams contains all the parameters to send to the API endpoint
for the get archive operation typically these are written to a http.Request
*/
type GetArchiveParams struct {

	/*Name
	  container name or id

	*/
	Name string
	/*Path
	  Path to a directory in the container to extract

	*/
	Path string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get archive params
func (o *GetArchiveParams) WithTimeout(timeout time.Duration) *GetArchiveParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get archive params
func (o *GetArchiveParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get archive params
func (o *GetArchiveParams) WithContext(ctx context.Context) *GetArchiveParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get archive params
func (o *GetArchiveParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get archive params
func (o *GetArchiveParams) WithHTTPClient(client *http.Client) *GetArchiveParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get archive params
func (o *GetArchiveParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the get archive params
func (o *GetArchiveParams) WithName(name string) *GetArchiveParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get archive params
func (o *GetArchiveParams) SetName(name string) {
	o.Name = name
}

// WithPath adds the path to the get archive params
func (o *GetArchiveParams) WithPath(path string) *GetArchiveParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the get archive params
func (o *GetArchiveParams) SetPath(path string) {
	o.Path = path
}

// WriteToRequest writes these params to a swagger request
func (o *GetArchiveParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// query param path
	qrPath := o.Path
	qPath := qrPath
	if qPath != "" {
		if err := r.SetQueryParam("path", qPath); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
