// Code generated by go-swagger; DO NOT EDIT.

package containers_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// WaitContainerReader is a Reader for the WaitContainer structure.
type WaitContainerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *WaitContainerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewWaitContainerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewWaitContainerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewWaitContainerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewWaitContainerOK creates a WaitContainerOK with default headers values
func NewWaitContainerOK() *WaitContainerOK {
	return &WaitContainerOK{}
}

/*WaitContainerOK handles this case with default header values.

Wait container
*/
type WaitContainerOK struct {
	Payload *WaitContainerOKBody
}

func (o *WaitContainerOK) Error() string {
	return fmt.Sprintf("[POST /containers/{name}/wait][%d] waitContainerOK  %+v", 200, o.Payload)
}

func (o *WaitContainerOK) GetPayload() *WaitContainerOKBody {
	return o.Payload
}

func (o *WaitContainerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(WaitContainerOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWaitContainerNotFound creates a WaitContainerNotFound with default headers values
func NewWaitContainerNotFound() *WaitContainerNotFound {
	return &WaitContainerNotFound{}
}

/*WaitContainerNotFound handles this case with default header values.

No such container
*/
type WaitContainerNotFound struct {
	Payload *WaitContainerNotFoundBody
}

func (o *WaitContainerNotFound) Error() string {
	return fmt.Sprintf("[POST /containers/{name}/wait][%d] waitContainerNotFound  %+v", 404, o.Payload)
}

func (o *WaitContainerNotFound) GetPayload() *WaitContainerNotFoundBody {
	return o.Payload
}

func (o *WaitContainerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(WaitContainerNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewWaitContainerInternalServerError creates a WaitContainerInternalServerError with default headers values
func NewWaitContainerInternalServerError() *WaitContainerInternalServerError {
	return &WaitContainerInternalServerError{}
}

/*WaitContainerInternalServerError handles this case with default header values.

Internal server error
*/
type WaitContainerInternalServerError struct {
	Payload *WaitContainerInternalServerErrorBody
}

func (o *WaitContainerInternalServerError) Error() string {
	return fmt.Sprintf("[POST /containers/{name}/wait][%d] waitContainerInternalServerError  %+v", 500, o.Payload)
}

func (o *WaitContainerInternalServerError) GetPayload() *WaitContainerInternalServerErrorBody {
	return o.Payload
}

func (o *WaitContainerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(WaitContainerInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*WaitContainerInternalServerErrorBody wait container internal server error body
swagger:model WaitContainerInternalServerErrorBody
*/
type WaitContainerInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this wait container internal server error body
func (o *WaitContainerInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this wait container internal server error body based on context it is used
func (o *WaitContainerInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *WaitContainerInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WaitContainerInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res WaitContainerInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*WaitContainerNotFoundBody wait container not found body
swagger:model WaitContainerNotFoundBody
*/
type WaitContainerNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this wait container not found body
func (o *WaitContainerNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this wait container not found body based on context it is used
func (o *WaitContainerNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *WaitContainerNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WaitContainerNotFoundBody) UnmarshalBinary(b []byte) error {
	var res WaitContainerNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*WaitContainerOKBody wait container o k body
swagger:model WaitContainerOKBody
*/
type WaitContainerOKBody struct {

	// error
	Error *WaitContainerOKBodyError `json:"Error,omitempty"`

	// container exit code
	StatusCode int64 `json:"StatusCode,omitempty"`
}

// Validate validates this wait container o k body
func (o *WaitContainerOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateError(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *WaitContainerOKBody) validateError(formats strfmt.Registry) error {
	if swag.IsZero(o.Error) { // not required
		return nil
	}

	if o.Error != nil {
		if err := o.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("waitContainerOK" + "." + "Error")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this wait container o k body based on the context it is used
func (o *WaitContainerOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *WaitContainerOKBody) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if o.Error != nil {
		if err := o.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("waitContainerOK" + "." + "Error")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *WaitContainerOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WaitContainerOKBody) UnmarshalBinary(b []byte) error {
	var res WaitContainerOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*WaitContainerOKBodyError wait container o k body error
swagger:model WaitContainerOKBodyError
*/
type WaitContainerOKBodyError struct {

	// message
	Message string `json:"Message,omitempty"`
}

// Validate validates this wait container o k body error
func (o *WaitContainerOKBodyError) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this wait container o k body error based on context it is used
func (o *WaitContainerOKBodyError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *WaitContainerOKBodyError) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *WaitContainerOKBodyError) UnmarshalBinary(b []byte) error {
	var res WaitContainerOKBodyError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
