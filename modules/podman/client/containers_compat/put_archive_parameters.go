// Code generated by go-swagger; DO NOT EDIT.

package containers_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewPutArchiveParams creates a new PutArchiveParams object
// with the default values initialized.
func NewPutArchiveParams() *PutArchiveParams {
	var ()
	return &PutArchiveParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPutArchiveParamsWithTimeout creates a new PutArchiveParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPutArchiveParamsWithTimeout(timeout time.Duration) *PutArchiveParams {
	var ()
	return &PutArchiveParams{

		timeout: timeout,
	}
}

// NewPutArchiveParamsWithContext creates a new PutArchiveParams object
// with the default values initialized, and the ability to set a context for a request
func NewPutArchiveParamsWithContext(ctx context.Context) *PutArchiveParams {
	var ()
	return &PutArchiveParams{

		Context: ctx,
	}
}

// NewPutArchiveParamsWithHTTPClient creates a new PutArchiveParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPutArchiveParamsWithHTTPClient(client *http.Client) *PutArchiveParams {
	var ()
	return &PutArchiveParams{
		HTTPClient: client,
	}
}

/*PutArchiveParams contains all the parameters to send to the API endpoint
for the put archive operation typically these are written to a http.Request
*/
type PutArchiveParams struct {

	/*CopyUIDGID
	  copy UID/GID maps to the dest file or di (1 or true)

	*/
	CopyUIDGID *string
	/*Name
	  container name or id

	*/
	Name string
	/*NoOverwriteDirNonDir
	  if unpacking the given content would cause an existing directory to be replaced with a non-directory and vice versa (1 or true)

	*/
	NoOverwriteDirNonDir *string
	/*Path
	  Path to a directory in the container to extract

	*/
	Path string
	/*Request
	  tarfile of files to copy into the container

	*/
	Request string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the put archive params
func (o *PutArchiveParams) WithTimeout(timeout time.Duration) *PutArchiveParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the put archive params
func (o *PutArchiveParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the put archive params
func (o *PutArchiveParams) WithContext(ctx context.Context) *PutArchiveParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the put archive params
func (o *PutArchiveParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the put archive params
func (o *PutArchiveParams) WithHTTPClient(client *http.Client) *PutArchiveParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the put archive params
func (o *PutArchiveParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCopyUIDGID adds the copyUIDGID to the put archive params
func (o *PutArchiveParams) WithCopyUIDGID(copyUIDGID *string) *PutArchiveParams {
	o.SetCopyUIDGID(copyUIDGID)
	return o
}

// SetCopyUIDGID adds the copyUidGId to the put archive params
func (o *PutArchiveParams) SetCopyUIDGID(copyUIDGID *string) {
	o.CopyUIDGID = copyUIDGID
}

// WithName adds the name to the put archive params
func (o *PutArchiveParams) WithName(name string) *PutArchiveParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the put archive params
func (o *PutArchiveParams) SetName(name string) {
	o.Name = name
}

// WithNoOverwriteDirNonDir adds the noOverwriteDirNonDir to the put archive params
func (o *PutArchiveParams) WithNoOverwriteDirNonDir(noOverwriteDirNonDir *string) *PutArchiveParams {
	o.SetNoOverwriteDirNonDir(noOverwriteDirNonDir)
	return o
}

// SetNoOverwriteDirNonDir adds the noOverwriteDirNonDir to the put archive params
func (o *PutArchiveParams) SetNoOverwriteDirNonDir(noOverwriteDirNonDir *string) {
	o.NoOverwriteDirNonDir = noOverwriteDirNonDir
}

// WithPath adds the path to the put archive params
func (o *PutArchiveParams) WithPath(path string) *PutArchiveParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the put archive params
func (o *PutArchiveParams) SetPath(path string) {
	o.Path = path
}

// WithRequest adds the request to the put archive params
func (o *PutArchiveParams) WithRequest(request string) *PutArchiveParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the put archive params
func (o *PutArchiveParams) SetRequest(request string) {
	o.Request = request
}

// WriteToRequest writes these params to a swagger request
func (o *PutArchiveParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CopyUIDGID != nil {

		// query param copyUIDGID
		var qrCopyUIDGID string
		if o.CopyUIDGID != nil {
			qrCopyUIDGID = *o.CopyUIDGID
		}
		qCopyUIDGID := qrCopyUIDGID
		if qCopyUIDGID != "" {
			if err := r.SetQueryParam("copyUIDGID", qCopyUIDGID); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.NoOverwriteDirNonDir != nil {

		// query param noOverwriteDirNonDir
		var qrNoOverwriteDirNonDir string
		if o.NoOverwriteDirNonDir != nil {
			qrNoOverwriteDirNonDir = *o.NoOverwriteDirNonDir
		}
		qNoOverwriteDirNonDir := qrNoOverwriteDirNonDir
		if qNoOverwriteDirNonDir != "" {
			if err := r.SetQueryParam("noOverwriteDirNonDir", qNoOverwriteDirNonDir); err != nil {
				return err
			}
		}

	}

	// query param path
	qrPath := o.Path
	qPath := qrPath
	if qPath != "" {
		if err := r.SetQueryParam("path", qPath); err != nil {
			return err
		}
	}

	if err := r.SetBodyParam(o.Request); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
