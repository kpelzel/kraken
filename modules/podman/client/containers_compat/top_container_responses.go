// Code generated by go-swagger; DO NOT EDIT.

package containers_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TopContainerReader is a Reader for the TopContainer structure.
type TopContainerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TopContainerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTopContainerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewTopContainerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewTopContainerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewTopContainerOK creates a TopContainerOK with default headers values
func NewTopContainerOK() *TopContainerOK {
	return &TopContainerOK{}
}

/*TopContainerOK handles this case with default header values.

List processes in container
*/
type TopContainerOK struct {
	Payload *TopContainerOKBody
}

func (o *TopContainerOK) Error() string {
	return fmt.Sprintf("[GET /containers/{name}/top][%d] topContainerOK  %+v", 200, o.Payload)
}

func (o *TopContainerOK) GetPayload() *TopContainerOKBody {
	return o.Payload
}

func (o *TopContainerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(TopContainerOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTopContainerNotFound creates a TopContainerNotFound with default headers values
func NewTopContainerNotFound() *TopContainerNotFound {
	return &TopContainerNotFound{}
}

/*TopContainerNotFound handles this case with default header values.

No such container
*/
type TopContainerNotFound struct {
	Payload *TopContainerNotFoundBody
}

func (o *TopContainerNotFound) Error() string {
	return fmt.Sprintf("[GET /containers/{name}/top][%d] topContainerNotFound  %+v", 404, o.Payload)
}

func (o *TopContainerNotFound) GetPayload() *TopContainerNotFoundBody {
	return o.Payload
}

func (o *TopContainerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(TopContainerNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTopContainerInternalServerError creates a TopContainerInternalServerError with default headers values
func NewTopContainerInternalServerError() *TopContainerInternalServerError {
	return &TopContainerInternalServerError{}
}

/*TopContainerInternalServerError handles this case with default header values.

Internal server error
*/
type TopContainerInternalServerError struct {
	Payload *TopContainerInternalServerErrorBody
}

func (o *TopContainerInternalServerError) Error() string {
	return fmt.Sprintf("[GET /containers/{name}/top][%d] topContainerInternalServerError  %+v", 500, o.Payload)
}

func (o *TopContainerInternalServerError) GetPayload() *TopContainerInternalServerErrorBody {
	return o.Payload
}

func (o *TopContainerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(TopContainerInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*TopContainerInternalServerErrorBody top container internal server error body
swagger:model TopContainerInternalServerErrorBody
*/
type TopContainerInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this top container internal server error body
func (o *TopContainerInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this top container internal server error body based on context it is used
func (o *TopContainerInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TopContainerInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TopContainerInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res TopContainerInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*TopContainerNotFoundBody top container not found body
swagger:model TopContainerNotFoundBody
*/
type TopContainerNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this top container not found body
func (o *TopContainerNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this top container not found body based on context it is used
func (o *TopContainerNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TopContainerNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TopContainerNotFoundBody) UnmarshalBinary(b []byte) error {
	var res TopContainerNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*TopContainerOKBody top container o k body
swagger:model TopContainerOKBody
*/
type TopContainerOKBody struct {

	// Each process running in the container, where each is process
	// is an array of values corresponding to the titles.
	// Required: true
	Processes [][]string `json:"Processes"`

	// The ps column titles
	// Required: true
	Titles []string `json:"Titles"`
}

// Validate validates this top container o k body
func (o *TopContainerOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateProcesses(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitles(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TopContainerOKBody) validateProcesses(formats strfmt.Registry) error {

	if err := validate.Required("topContainerOK"+"."+"Processes", "body", o.Processes); err != nil {
		return err
	}

	return nil
}

func (o *TopContainerOKBody) validateTitles(formats strfmt.Registry) error {

	if err := validate.Required("topContainerOK"+"."+"Titles", "body", o.Titles); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this top container o k body based on context it is used
func (o *TopContainerOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *TopContainerOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TopContainerOKBody) UnmarshalBinary(b []byte) error {
	var res TopContainerOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
