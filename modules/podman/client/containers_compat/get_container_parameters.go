// Code generated by go-swagger; DO NOT EDIT.

package containers_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetContainerParams creates a new GetContainerParams object
// with the default values initialized.
func NewGetContainerParams() *GetContainerParams {
	var (
		sizeDefault = bool(false)
	)
	return &GetContainerParams{
		Size: &sizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetContainerParamsWithTimeout creates a new GetContainerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetContainerParamsWithTimeout(timeout time.Duration) *GetContainerParams {
	var (
		sizeDefault = bool(false)
	)
	return &GetContainerParams{
		Size: &sizeDefault,

		timeout: timeout,
	}
}

// NewGetContainerParamsWithContext creates a new GetContainerParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetContainerParamsWithContext(ctx context.Context) *GetContainerParams {
	var (
		sizeDefault = bool(false)
	)
	return &GetContainerParams{
		Size: &sizeDefault,

		Context: ctx,
	}
}

// NewGetContainerParamsWithHTTPClient creates a new GetContainerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetContainerParamsWithHTTPClient(client *http.Client) *GetContainerParams {
	var (
		sizeDefault = bool(false)
	)
	return &GetContainerParams{
		Size:       &sizeDefault,
		HTTPClient: client,
	}
}

/*GetContainerParams contains all the parameters to send to the API endpoint
for the get container operation typically these are written to a http.Request
*/
type GetContainerParams struct {

	/*Name
	  the name or id of the container

	*/
	Name string
	/*Size
	  include the size of the container

	*/
	Size *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get container params
func (o *GetContainerParams) WithTimeout(timeout time.Duration) *GetContainerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get container params
func (o *GetContainerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get container params
func (o *GetContainerParams) WithContext(ctx context.Context) *GetContainerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get container params
func (o *GetContainerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get container params
func (o *GetContainerParams) WithHTTPClient(client *http.Client) *GetContainerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get container params
func (o *GetContainerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the get container params
func (o *GetContainerParams) WithName(name string) *GetContainerParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get container params
func (o *GetContainerParams) SetName(name string) {
	o.Name = name
}

// WithSize adds the size to the get container params
func (o *GetContainerParams) WithSize(size *bool) *GetContainerParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get container params
func (o *GetContainerParams) SetSize(size *bool) {
	o.Size = size
}

// WriteToRequest writes these params to a swagger request
func (o *GetContainerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.Size != nil {

		// query param size
		var qrSize bool
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatBool(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
