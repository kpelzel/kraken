// Code generated by go-swagger; DO NOT EDIT.

package containers_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewWaitContainerParams creates a new WaitContainerParams object
// with the default values initialized.
func NewWaitContainerParams() *WaitContainerParams {
	var ()
	return &WaitContainerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewWaitContainerParamsWithTimeout creates a new WaitContainerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewWaitContainerParamsWithTimeout(timeout time.Duration) *WaitContainerParams {
	var ()
	return &WaitContainerParams{

		timeout: timeout,
	}
}

// NewWaitContainerParamsWithContext creates a new WaitContainerParams object
// with the default values initialized, and the ability to set a context for a request
func NewWaitContainerParamsWithContext(ctx context.Context) *WaitContainerParams {
	var ()
	return &WaitContainerParams{

		Context: ctx,
	}
}

// NewWaitContainerParamsWithHTTPClient creates a new WaitContainerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewWaitContainerParamsWithHTTPClient(client *http.Client) *WaitContainerParams {
	var ()
	return &WaitContainerParams{
		HTTPClient: client,
	}
}

/*WaitContainerParams contains all the parameters to send to the API endpoint
for the wait container operation typically these are written to a http.Request
*/
type WaitContainerParams struct {

	/*Condition
	  wait until container is to a given condition. default is stopped. valid conditions are:
	  - configured
	  - created
	  - exited
	  - paused
	  - running
	  - stopped


	*/
	Condition *string
	/*Name
	  the name or ID of the container

	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the wait container params
func (o *WaitContainerParams) WithTimeout(timeout time.Duration) *WaitContainerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the wait container params
func (o *WaitContainerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the wait container params
func (o *WaitContainerParams) WithContext(ctx context.Context) *WaitContainerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the wait container params
func (o *WaitContainerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the wait container params
func (o *WaitContainerParams) WithHTTPClient(client *http.Client) *WaitContainerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the wait container params
func (o *WaitContainerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCondition adds the condition to the wait container params
func (o *WaitContainerParams) WithCondition(condition *string) *WaitContainerParams {
	o.SetCondition(condition)
	return o
}

// SetCondition adds the condition to the wait container params
func (o *WaitContainerParams) SetCondition(condition *string) {
	o.Condition = condition
}

// WithName adds the name to the wait container params
func (o *WaitContainerParams) WithName(name string) *WaitContainerParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the wait container params
func (o *WaitContainerParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *WaitContainerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Condition != nil {

		// query param condition
		var qrCondition string
		if o.Condition != nil {
			qrCondition = *o.Condition
		}
		qCondition := qrCondition
		if qCondition != "" {
			if err := r.SetQueryParam("condition", qCondition); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
