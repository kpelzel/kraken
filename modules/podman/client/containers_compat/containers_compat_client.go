// Code generated by go-swagger; DO NOT EDIT.

package containers_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new containers compat API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for containers compat API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AttachContainer(params *AttachContainerParams) error

	CommitContainer(params *CommitContainerParams) (*CommitContainerCreated, error)

	CreateContainer(params *CreateContainerParams) (*CreateContainerCreated, error)

	ExportContainer(params *ExportContainerParams) (*ExportContainerOK, error)

	GetArchive(params *GetArchiveParams, writer io.Writer) (*GetArchiveOK, error)

	GetContainer(params *GetContainerParams) (*GetContainerOK, error)

	KillContainer(params *KillContainerParams) (*KillContainerNoContent, error)

	LibpodGetArchive(params *LibpodGetArchiveParams, writer io.Writer) (*LibpodGetArchiveOK, error)

	ListContainers(params *ListContainersParams) (*ListContainersOK, error)

	LogsFromContainer(params *LogsFromContainerParams) (*LogsFromContainerOK, error)

	PauseContainer(params *PauseContainerParams) (*PauseContainerNoContent, error)

	PruneContainers(params *PruneContainersParams) (*PruneContainersOK, error)

	PutArchive(params *PutArchiveParams) (*PutArchiveOK, error)

	RemoveContainer(params *RemoveContainerParams) (*RemoveContainerNoContent, error)

	ResizeContainer(params *ResizeContainerParams) (*ResizeContainerOK, error)

	RestartContainer(params *RestartContainerParams) (*RestartContainerNoContent, error)

	StartContainer(params *StartContainerParams) (*StartContainerNoContent, error)

	StatsContainer(params *StatsContainerParams) (*StatsContainerOK, error)

	StopContainer(params *StopContainerParams) (*StopContainerNoContent, error)

	TopContainer(params *TopContainerParams) (*TopContainerOK, error)

	UnpauseContainer(params *UnpauseContainerParams) (*UnpauseContainerNoContent, error)

	WaitContainer(params *WaitContainerParams) (*WaitContainerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AttachContainer attaches to a container

  Hijacks the connection to forward the container's standard streams to the client.
*/
func (a *Client) AttachContainer(params *AttachContainerParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachContainerParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "attachContainer",
		Method:             "POST",
		PathPattern:        "/containers/{name}/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AttachContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil
}

/*
  CommitContainer news image

  Create a new image from a container
*/
func (a *Client) CommitContainer(params *CommitContainerParams) (*CommitContainerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "commitContainer",
		Method:             "POST",
		PathPattern:        "/commit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CommitContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommitContainerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for commitContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateContainer creates a container
*/
func (a *Client) CreateContainer(params *CreateContainerParams) (*CreateContainerCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createContainer",
		Method:             "POST",
		PathPattern:        "/containers/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateContainerCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExportContainer exports a container

  Export the contents of a container as a tarball.
*/
func (a *Client) ExportContainer(params *ExportContainerParams) (*ExportContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExportContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "exportContainer",
		Method:             "GET",
		PathPattern:        "/containers/{name}/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ExportContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExportContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for exportContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetArchive gets files from a container

  Get a tar archive of files from a container
*/
func (a *Client) GetArchive(params *GetArchiveParams, writer io.Writer) (*GetArchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetArchiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getArchive",
		Method:             "GET",
		PathPattern:        "/containers/{name}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetArchiveReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetArchiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getArchive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetContainer inspects container

  Return low-level information about a container.
*/
func (a *Client) GetContainer(params *GetContainerParams) (*GetContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getContainer",
		Method:             "GET",
		PathPattern:        "/containers/{name}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  KillContainer kills container

  Signal to send to the container as an integer or string (e.g. SIGINT)
*/
func (a *Client) KillContainer(params *KillContainerParams) (*KillContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewKillContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "killContainer",
		Method:             "POST",
		PathPattern:        "/containers/{name}/kill",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &KillContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*KillContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for killContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodGetArchive copies files from a container

  Copy a tar archive of files from a container
*/
func (a *Client) LibpodGetArchive(params *LibpodGetArchiveParams, writer io.Writer) (*LibpodGetArchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodGetArchiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodGetArchive",
		Method:             "GET",
		PathPattern:        "/libpod/containers/{name}/copy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodGetArchiveReader{formats: a.formats, writer: writer},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodGetArchiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodGetArchive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListContainers lists containers

  Returns a list of containers
*/
func (a *Client) ListContainers(params *ListContainersParams) (*ListContainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListContainersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listContainers",
		Method:             "GET",
		PathPattern:        "/containers/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListContainersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListContainersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listContainers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LogsFromContainer gets container logs

  Get stdout and stderr logs from a container.
*/
func (a *Client) LogsFromContainer(params *LogsFromContainerParams) (*LogsFromContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogsFromContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "logsFromContainer",
		Method:             "GET",
		PathPattern:        "/containers/{name}/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LogsFromContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogsFromContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for logsFromContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PauseContainer pauses container

  Use the cgroups freezer to suspend all processes in a container.
*/
func (a *Client) PauseContainer(params *PauseContainerParams) (*PauseContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPauseContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pauseContainer",
		Method:             "POST",
		PathPattern:        "/containers/{name}/pause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PauseContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PauseContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pauseContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PruneContainers deletes stopped containers

  Remove containers not in use
*/
func (a *Client) PruneContainers(params *PruneContainersParams) (*PruneContainersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPruneContainersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pruneContainers",
		Method:             "POST",
		PathPattern:        "/containers/prune",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PruneContainersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PruneContainersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pruneContainers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutArchive puts files into a container

  Put a tar archive of files into a container
*/
func (a *Client) PutArchive(params *PutArchiveParams) (*PutArchiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutArchiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putArchive",
		Method:             "PUT",
		PathPattern:        "/containers/{name}/archive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutArchiveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutArchiveOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putArchive: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveContainer removes a container
*/
func (a *Client) RemoveContainer(params *RemoveContainerParams) (*RemoveContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "removeContainer",
		Method:             "DELETE",
		PathPattern:        "/containers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ResizeContainer resizes a container s t t y

  Resize the terminal attached to a container (for use with Attach).
*/
func (a *Client) ResizeContainer(params *ResizeContainerParams) (*ResizeContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewResizeContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "resizeContainer",
		Method:             "POST",
		PathPattern:        "/containers/{name}/resize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ResizeContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ResizeContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for resizeContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RestartContainer restarts container
*/
func (a *Client) RestartContainer(params *RestartContainerParams) (*RestartContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRestartContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "restartContainer",
		Method:             "POST",
		PathPattern:        "/containers/{name}/restart",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RestartContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RestartContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for restartContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StartContainer starts a container
*/
func (a *Client) StartContainer(params *StartContainerParams) (*StartContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startContainer",
		Method:             "POST",
		PathPattern:        "/containers/{name}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StartContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for startContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StatsContainer gets stats for a container

  This returns a live stream of a container’s resource usage statistics.
*/
func (a *Client) StatsContainer(params *StatsContainerParams) (*StatsContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatsContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "statsContainer",
		Method:             "GET",
		PathPattern:        "/containers/{name}/stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StatsContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StatsContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for statsContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StopContainer stops a container

  Stop a container
*/
func (a *Client) StopContainer(params *StopContainerParams) (*StopContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopContainer",
		Method:             "POST",
		PathPattern:        "/containers/{name}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StopContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stopContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  TopContainer lists processes running inside a container
*/
func (a *Client) TopContainer(params *TopContainerParams) (*TopContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTopContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "topContainer",
		Method:             "GET",
		PathPattern:        "/containers/{name}/top",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TopContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TopContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for topContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UnpauseContainer unpauses container

  Resume a paused container
*/
func (a *Client) UnpauseContainer(params *UnpauseContainerParams) (*UnpauseContainerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnpauseContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "unpauseContainer",
		Method:             "POST",
		PathPattern:        "/containers/{name}/unpause",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UnpauseContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnpauseContainerNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unpauseContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  WaitContainer waits on a container

  Block until a container stops or given condition is met.
*/
func (a *Client) WaitContainer(params *WaitContainerParams) (*WaitContainerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewWaitContainerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "waitContainer",
		Method:             "POST",
		PathPattern:        "/containers/{name}/wait",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &WaitContainerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*WaitContainerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for waitContainer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
