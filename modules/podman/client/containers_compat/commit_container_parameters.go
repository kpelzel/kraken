// Code generated by go-swagger; DO NOT EDIT.

package containers_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCommitContainerParams creates a new CommitContainerParams object
// with the default values initialized.
func NewCommitContainerParams() *CommitContainerParams {
	var ()
	return &CommitContainerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCommitContainerParamsWithTimeout creates a new CommitContainerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCommitContainerParamsWithTimeout(timeout time.Duration) *CommitContainerParams {
	var ()
	return &CommitContainerParams{

		timeout: timeout,
	}
}

// NewCommitContainerParamsWithContext creates a new CommitContainerParams object
// with the default values initialized, and the ability to set a context for a request
func NewCommitContainerParamsWithContext(ctx context.Context) *CommitContainerParams {
	var ()
	return &CommitContainerParams{

		Context: ctx,
	}
}

// NewCommitContainerParamsWithHTTPClient creates a new CommitContainerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCommitContainerParamsWithHTTPClient(client *http.Client) *CommitContainerParams {
	var ()
	return &CommitContainerParams{
		HTTPClient: client,
	}
}

/*CommitContainerParams contains all the parameters to send to the API endpoint
for the commit container operation typically these are written to a http.Request
*/
type CommitContainerParams struct {

	/*Author
	  author of the image

	*/
	Author *string
	/*Changes
	  instructions to apply while committing in Dockerfile format

	*/
	Changes *string
	/*Comment
	  commit message

	*/
	Comment *string
	/*Container
	  the name or ID of a container

	*/
	Container *string
	/*Pause
	  pause the container before committing it

	*/
	Pause *bool
	/*Repo
	  the repository name for the created image

	*/
	Repo *string
	/*Tag
	  tag name for the created image

	*/
	Tag *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the commit container params
func (o *CommitContainerParams) WithTimeout(timeout time.Duration) *CommitContainerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the commit container params
func (o *CommitContainerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the commit container params
func (o *CommitContainerParams) WithContext(ctx context.Context) *CommitContainerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the commit container params
func (o *CommitContainerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the commit container params
func (o *CommitContainerParams) WithHTTPClient(client *http.Client) *CommitContainerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the commit container params
func (o *CommitContainerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthor adds the author to the commit container params
func (o *CommitContainerParams) WithAuthor(author *string) *CommitContainerParams {
	o.SetAuthor(author)
	return o
}

// SetAuthor adds the author to the commit container params
func (o *CommitContainerParams) SetAuthor(author *string) {
	o.Author = author
}

// WithChanges adds the changes to the commit container params
func (o *CommitContainerParams) WithChanges(changes *string) *CommitContainerParams {
	o.SetChanges(changes)
	return o
}

// SetChanges adds the changes to the commit container params
func (o *CommitContainerParams) SetChanges(changes *string) {
	o.Changes = changes
}

// WithComment adds the comment to the commit container params
func (o *CommitContainerParams) WithComment(comment *string) *CommitContainerParams {
	o.SetComment(comment)
	return o
}

// SetComment adds the comment to the commit container params
func (o *CommitContainerParams) SetComment(comment *string) {
	o.Comment = comment
}

// WithContainer adds the container to the commit container params
func (o *CommitContainerParams) WithContainer(container *string) *CommitContainerParams {
	o.SetContainer(container)
	return o
}

// SetContainer adds the container to the commit container params
func (o *CommitContainerParams) SetContainer(container *string) {
	o.Container = container
}

// WithPause adds the pause to the commit container params
func (o *CommitContainerParams) WithPause(pause *bool) *CommitContainerParams {
	o.SetPause(pause)
	return o
}

// SetPause adds the pause to the commit container params
func (o *CommitContainerParams) SetPause(pause *bool) {
	o.Pause = pause
}

// WithRepo adds the repo to the commit container params
func (o *CommitContainerParams) WithRepo(repo *string) *CommitContainerParams {
	o.SetRepo(repo)
	return o
}

// SetRepo adds the repo to the commit container params
func (o *CommitContainerParams) SetRepo(repo *string) {
	o.Repo = repo
}

// WithTag adds the tag to the commit container params
func (o *CommitContainerParams) WithTag(tag *string) *CommitContainerParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the commit container params
func (o *CommitContainerParams) SetTag(tag *string) {
	o.Tag = tag
}

// WriteToRequest writes these params to a swagger request
func (o *CommitContainerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Author != nil {

		// query param author
		var qrAuthor string
		if o.Author != nil {
			qrAuthor = *o.Author
		}
		qAuthor := qrAuthor
		if qAuthor != "" {
			if err := r.SetQueryParam("author", qAuthor); err != nil {
				return err
			}
		}

	}

	if o.Changes != nil {

		// query param changes
		var qrChanges string
		if o.Changes != nil {
			qrChanges = *o.Changes
		}
		qChanges := qrChanges
		if qChanges != "" {
			if err := r.SetQueryParam("changes", qChanges); err != nil {
				return err
			}
		}

	}

	if o.Comment != nil {

		// query param comment
		var qrComment string
		if o.Comment != nil {
			qrComment = *o.Comment
		}
		qComment := qrComment
		if qComment != "" {
			if err := r.SetQueryParam("comment", qComment); err != nil {
				return err
			}
		}

	}

	if o.Container != nil {

		// query param container
		var qrContainer string
		if o.Container != nil {
			qrContainer = *o.Container
		}
		qContainer := qrContainer
		if qContainer != "" {
			if err := r.SetQueryParam("container", qContainer); err != nil {
				return err
			}
		}

	}

	if o.Pause != nil {

		// query param pause
		var qrPause bool
		if o.Pause != nil {
			qrPause = *o.Pause
		}
		qPause := swag.FormatBool(qrPause)
		if qPause != "" {
			if err := r.SetQueryParam("pause", qPause); err != nil {
				return err
			}
		}

	}

	if o.Repo != nil {

		// query param repo
		var qrRepo string
		if o.Repo != nil {
			qrRepo = *o.Repo
		}
		qRepo := qrRepo
		if qRepo != "" {
			if err := r.SetQueryParam("repo", qRepo); err != nil {
				return err
			}
		}

	}

	if o.Tag != nil {

		// query param tag
		var qrTag string
		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {
			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
