// Code generated by go-swagger; DO NOT EDIT.

package containers_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AttachContainerReader is a Reader for the AttachContainer structure.
type AttachContainerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AttachContainerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 101:
		result := NewAttachContainerSwitchingProtocols()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 400:
		result := NewAttachContainerBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAttachContainerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAttachContainerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAttachContainerSwitchingProtocols creates a AttachContainerSwitchingProtocols with default headers values
func NewAttachContainerSwitchingProtocols() *AttachContainerSwitchingProtocols {
	return &AttachContainerSwitchingProtocols{}
}

/*AttachContainerSwitchingProtocols handles this case with default header values.

No error, connection has been hijacked for transporting streams.
*/
type AttachContainerSwitchingProtocols struct {
}

func (o *AttachContainerSwitchingProtocols) Error() string {
	return fmt.Sprintf("[POST /containers/{name}/attach][%d] attachContainerSwitchingProtocols ", 101)
}

func (o *AttachContainerSwitchingProtocols) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAttachContainerBadRequest creates a AttachContainerBadRequest with default headers values
func NewAttachContainerBadRequest() *AttachContainerBadRequest {
	return &AttachContainerBadRequest{}
}

/*AttachContainerBadRequest handles this case with default header values.

Bad parameter in request
*/
type AttachContainerBadRequest struct {
	Payload *AttachContainerBadRequestBody
}

func (o *AttachContainerBadRequest) Error() string {
	return fmt.Sprintf("[POST /containers/{name}/attach][%d] attachContainerBadRequest  %+v", 400, o.Payload)
}

func (o *AttachContainerBadRequest) GetPayload() *AttachContainerBadRequestBody {
	return o.Payload
}

func (o *AttachContainerBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AttachContainerBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachContainerNotFound creates a AttachContainerNotFound with default headers values
func NewAttachContainerNotFound() *AttachContainerNotFound {
	return &AttachContainerNotFound{}
}

/*AttachContainerNotFound handles this case with default header values.

No such container
*/
type AttachContainerNotFound struct {
	Payload *AttachContainerNotFoundBody
}

func (o *AttachContainerNotFound) Error() string {
	return fmt.Sprintf("[POST /containers/{name}/attach][%d] attachContainerNotFound  %+v", 404, o.Payload)
}

func (o *AttachContainerNotFound) GetPayload() *AttachContainerNotFoundBody {
	return o.Payload
}

func (o *AttachContainerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AttachContainerNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachContainerInternalServerError creates a AttachContainerInternalServerError with default headers values
func NewAttachContainerInternalServerError() *AttachContainerInternalServerError {
	return &AttachContainerInternalServerError{}
}

/*AttachContainerInternalServerError handles this case with default header values.

Internal server error
*/
type AttachContainerInternalServerError struct {
	Payload *AttachContainerInternalServerErrorBody
}

func (o *AttachContainerInternalServerError) Error() string {
	return fmt.Sprintf("[POST /containers/{name}/attach][%d] attachContainerInternalServerError  %+v", 500, o.Payload)
}

func (o *AttachContainerInternalServerError) GetPayload() *AttachContainerInternalServerErrorBody {
	return o.Payload
}

func (o *AttachContainerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AttachContainerInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AttachContainerBadRequestBody attach container bad request body
swagger:model AttachContainerBadRequestBody
*/
type AttachContainerBadRequestBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this attach container bad request body
func (o *AttachContainerBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this attach container bad request body based on context it is used
func (o *AttachContainerBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AttachContainerBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AttachContainerBadRequestBody) UnmarshalBinary(b []byte) error {
	var res AttachContainerBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AttachContainerInternalServerErrorBody attach container internal server error body
swagger:model AttachContainerInternalServerErrorBody
*/
type AttachContainerInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this attach container internal server error body
func (o *AttachContainerInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this attach container internal server error body based on context it is used
func (o *AttachContainerInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AttachContainerInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AttachContainerInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res AttachContainerInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AttachContainerNotFoundBody attach container not found body
swagger:model AttachContainerNotFoundBody
*/
type AttachContainerNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this attach container not found body
func (o *AttachContainerNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this attach container not found body based on context it is used
func (o *AttachContainerNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AttachContainerNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AttachContainerNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AttachContainerNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
