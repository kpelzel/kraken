// Code generated by go-swagger; DO NOT EDIT.

package containers_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRestartContainerParams creates a new RestartContainerParams object
// with the default values initialized.
func NewRestartContainerParams() *RestartContainerParams {
	var ()
	return &RestartContainerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRestartContainerParamsWithTimeout creates a new RestartContainerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRestartContainerParamsWithTimeout(timeout time.Duration) *RestartContainerParams {
	var ()
	return &RestartContainerParams{

		timeout: timeout,
	}
}

// NewRestartContainerParamsWithContext creates a new RestartContainerParams object
// with the default values initialized, and the ability to set a context for a request
func NewRestartContainerParamsWithContext(ctx context.Context) *RestartContainerParams {
	var ()
	return &RestartContainerParams{

		Context: ctx,
	}
}

// NewRestartContainerParamsWithHTTPClient creates a new RestartContainerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRestartContainerParamsWithHTTPClient(client *http.Client) *RestartContainerParams {
	var ()
	return &RestartContainerParams{
		HTTPClient: client,
	}
}

/*RestartContainerParams contains all the parameters to send to the API endpoint
for the restart container operation typically these are written to a http.Request
*/
type RestartContainerParams struct {

	/*Name
	  the name or ID of the container

	*/
	Name string
	/*T
	  timeout before sending kill signal to container

	*/
	T *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the restart container params
func (o *RestartContainerParams) WithTimeout(timeout time.Duration) *RestartContainerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the restart container params
func (o *RestartContainerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the restart container params
func (o *RestartContainerParams) WithContext(ctx context.Context) *RestartContainerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the restart container params
func (o *RestartContainerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the restart container params
func (o *RestartContainerParams) WithHTTPClient(client *http.Client) *RestartContainerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the restart container params
func (o *RestartContainerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the restart container params
func (o *RestartContainerParams) WithName(name string) *RestartContainerParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the restart container params
func (o *RestartContainerParams) SetName(name string) {
	o.Name = name
}

// WithT adds the t to the restart container params
func (o *RestartContainerParams) WithT(t *int64) *RestartContainerParams {
	o.SetT(t)
	return o
}

// SetT adds the t to the restart container params
func (o *RestartContainerParams) SetT(t *int64) {
	o.T = t
}

// WriteToRequest writes these params to a swagger request
func (o *RestartContainerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.T != nil {

		// query param t
		var qrT int64
		if o.T != nil {
			qrT = *o.T
		}
		qT := swag.FormatInt64(qrT)
		if qT != "" {
			if err := r.SetQueryParam("t", qT); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
