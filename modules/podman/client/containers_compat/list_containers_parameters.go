// Code generated by go-swagger; DO NOT EDIT.

package containers_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListContainersParams creates a new ListContainersParams object
// with the default values initialized.
func NewListContainersParams() *ListContainersParams {
	var (
		allDefault  = bool(false)
		sizeDefault = bool(false)
	)
	return &ListContainersParams{
		All:  &allDefault,
		Size: &sizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListContainersParamsWithTimeout creates a new ListContainersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListContainersParamsWithTimeout(timeout time.Duration) *ListContainersParams {
	var (
		allDefault  = bool(false)
		sizeDefault = bool(false)
	)
	return &ListContainersParams{
		All:  &allDefault,
		Size: &sizeDefault,

		timeout: timeout,
	}
}

// NewListContainersParamsWithContext creates a new ListContainersParams object
// with the default values initialized, and the ability to set a context for a request
func NewListContainersParamsWithContext(ctx context.Context) *ListContainersParams {
	var (
		allDefault  = bool(false)
		sizeDefault = bool(false)
	)
	return &ListContainersParams{
		All:  &allDefault,
		Size: &sizeDefault,

		Context: ctx,
	}
}

// NewListContainersParamsWithHTTPClient creates a new ListContainersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListContainersParamsWithHTTPClient(client *http.Client) *ListContainersParams {
	var (
		allDefault  = bool(false)
		sizeDefault = bool(false)
	)
	return &ListContainersParams{
		All:        &allDefault,
		Size:       &sizeDefault,
		HTTPClient: client,
	}
}

/*ListContainersParams contains all the parameters to send to the API endpoint
for the list containers operation typically these are written to a http.Request
*/
type ListContainersParams struct {

	/*All
	  Return all containers. By default, only running containers are shown

	*/
	All *bool
	/*Filters
	 Returns a list of containers.
	- ancestor=(<image-name>[:<tag>], <image id>, or <image@digest>)
	- before=(<container id> or <container name>)
	- expose=(<port>[/<proto>]|<startport-endport>/[<proto>])
	- exited=<int> containers with exit code of <int>
	- health=(starting|healthy|unhealthy|none)
	- id=<ID> a container's ID
	- is-task=(true|false)
	- label=key or label="key=value" of a container label
	- name=<name> a container's name
	- network=(<network id> or <network name>)
	- publish=(<port>[/<proto>]|<startport-endport>/[<proto>])
	- since=(<container id> or <container name>)
	- status=(created|restarting|running|removing|paused|exited|dead)
	- volume=(<volume name> or <mount point destination>)


	*/
	Filters *string
	/*Limit
	  Return this number of most recently created containers, including non-running ones.

	*/
	Limit *int64
	/*Size
	  Return the size of container as fields SizeRw and SizeRootFs.

	*/
	Size *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list containers params
func (o *ListContainersParams) WithTimeout(timeout time.Duration) *ListContainersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list containers params
func (o *ListContainersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list containers params
func (o *ListContainersParams) WithContext(ctx context.Context) *ListContainersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list containers params
func (o *ListContainersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list containers params
func (o *ListContainersParams) WithHTTPClient(client *http.Client) *ListContainersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list containers params
func (o *ListContainersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAll adds the all to the list containers params
func (o *ListContainersParams) WithAll(all *bool) *ListContainersParams {
	o.SetAll(all)
	return o
}

// SetAll adds the all to the list containers params
func (o *ListContainersParams) SetAll(all *bool) {
	o.All = all
}

// WithFilters adds the filters to the list containers params
func (o *ListContainersParams) WithFilters(filters *string) *ListContainersParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the list containers params
func (o *ListContainersParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithLimit adds the limit to the list containers params
func (o *ListContainersParams) WithLimit(limit *int64) *ListContainersParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list containers params
func (o *ListContainersParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithSize adds the size to the list containers params
func (o *ListContainersParams) WithSize(size *bool) *ListContainersParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the list containers params
func (o *ListContainersParams) SetSize(size *bool) {
	o.Size = size
}

// WriteToRequest writes these params to a swagger request
func (o *ListContainersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.All != nil {

		// query param all
		var qrAll bool
		if o.All != nil {
			qrAll = *o.All
		}
		qAll := swag.FormatBool(qrAll)
		if qAll != "" {
			if err := r.SetQueryParam("all", qAll); err != nil {
				return err
			}
		}

	}

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Size != nil {

		// query param size
		var qrSize bool
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatBool(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
