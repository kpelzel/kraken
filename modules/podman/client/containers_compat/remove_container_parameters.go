// Code generated by go-swagger; DO NOT EDIT.

package containers_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRemoveContainerParams creates a new RemoveContainerParams object
// with the default values initialized.
func NewRemoveContainerParams() *RemoveContainerParams {
	var (
		forceDefault = bool(false)
		vDefault     = bool(false)
	)
	return &RemoveContainerParams{
		Force: &forceDefault,
		V:     &vDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveContainerParamsWithTimeout creates a new RemoveContainerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRemoveContainerParamsWithTimeout(timeout time.Duration) *RemoveContainerParams {
	var (
		forceDefault = bool(false)
		vDefault     = bool(false)
	)
	return &RemoveContainerParams{
		Force: &forceDefault,
		V:     &vDefault,

		timeout: timeout,
	}
}

// NewRemoveContainerParamsWithContext creates a new RemoveContainerParams object
// with the default values initialized, and the ability to set a context for a request
func NewRemoveContainerParamsWithContext(ctx context.Context) *RemoveContainerParams {
	var (
		forceDefault = bool(false)
		vDefault     = bool(false)
	)
	return &RemoveContainerParams{
		Force: &forceDefault,
		V:     &vDefault,

		Context: ctx,
	}
}

// NewRemoveContainerParamsWithHTTPClient creates a new RemoveContainerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRemoveContainerParamsWithHTTPClient(client *http.Client) *RemoveContainerParams {
	var (
		forceDefault = bool(false)
		vDefault     = bool(false)
	)
	return &RemoveContainerParams{
		Force:      &forceDefault,
		V:          &vDefault,
		HTTPClient: client,
	}
}

/*RemoveContainerParams contains all the parameters to send to the API endpoint
for the remove container operation typically these are written to a http.Request
*/
type RemoveContainerParams struct {

	/*Force
	  If the container is running, kill it before removing it.

	*/
	Force *bool
	/*Link
	  not supported

	*/
	Link *bool
	/*Name
	  the name or ID of the container

	*/
	Name string
	/*V
	  Remove the volumes associated with the container.

	*/
	V *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the remove container params
func (o *RemoveContainerParams) WithTimeout(timeout time.Duration) *RemoveContainerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove container params
func (o *RemoveContainerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove container params
func (o *RemoveContainerParams) WithContext(ctx context.Context) *RemoveContainerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove container params
func (o *RemoveContainerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove container params
func (o *RemoveContainerParams) WithHTTPClient(client *http.Client) *RemoveContainerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove container params
func (o *RemoveContainerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForce adds the force to the remove container params
func (o *RemoveContainerParams) WithForce(force *bool) *RemoveContainerParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the remove container params
func (o *RemoveContainerParams) SetForce(force *bool) {
	o.Force = force
}

// WithLink adds the link to the remove container params
func (o *RemoveContainerParams) WithLink(link *bool) *RemoveContainerParams {
	o.SetLink(link)
	return o
}

// SetLink adds the link to the remove container params
func (o *RemoveContainerParams) SetLink(link *bool) {
	o.Link = link
}

// WithName adds the name to the remove container params
func (o *RemoveContainerParams) WithName(name string) *RemoveContainerParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the remove container params
func (o *RemoveContainerParams) SetName(name string) {
	o.Name = name
}

// WithV adds the v to the remove container params
func (o *RemoveContainerParams) WithV(v *bool) *RemoveContainerParams {
	o.SetV(v)
	return o
}

// SetV adds the v to the remove container params
func (o *RemoveContainerParams) SetV(v *bool) {
	o.V = v
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveContainerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Force != nil {

		// query param force
		var qrForce bool
		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {
			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}

	}

	if o.Link != nil {

		// query param link
		var qrLink bool
		if o.Link != nil {
			qrLink = *o.Link
		}
		qLink := swag.FormatBool(qrLink)
		if qLink != "" {
			if err := r.SetQueryParam("link", qLink); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.V != nil {

		// query param v
		var qrV bool
		if o.V != nil {
			qrV = *o.V
		}
		qV := swag.FormatBool(qrV)
		if qV != "" {
			if err := r.SetQueryParam("v", qV); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
