// Code generated by go-swagger; DO NOT EDIT.

package networks_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new networks compat API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for networks compat API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CompatCreateNetwork(params *CompatCreateNetworkParams) (*CompatCreateNetworkOK, error)

	CompatInspectNetwork(params *CompatInspectNetworkParams) (*CompatInspectNetworkOK, error)

	CompatListNetwork(params *CompatListNetworkParams) (*CompatListNetworkOK, error)

	CompatRemoveNetwork(params *CompatRemoveNetworkParams) (*CompatRemoveNetworkNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CompatCreateNetwork creates network

  Create a network configuration
*/
func (a *Client) CompatCreateNetwork(params *CompatCreateNetworkParams) (*CompatCreateNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompatCreateNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "compatCreateNetwork",
		Method:             "POST",
		PathPattern:        "/networks/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CompatCreateNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompatCreateNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for compatCreateNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CompatInspectNetwork inspects a network

  Display low level configuration network
*/
func (a *Client) CompatInspectNetwork(params *CompatInspectNetworkParams) (*CompatInspectNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompatInspectNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "compatInspectNetwork",
		Method:             "GET",
		PathPattern:        "/networks/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CompatInspectNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompatInspectNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for compatInspectNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CompatListNetwork lists networks

  Display summary of network configurations
*/
func (a *Client) CompatListNetwork(params *CompatListNetworkParams) (*CompatListNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompatListNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "compatListNetwork",
		Method:             "GET",
		PathPattern:        "/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CompatListNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompatListNetworkOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for compatListNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CompatRemoveNetwork removes a network

  Remove a network
*/
func (a *Client) CompatRemoveNetwork(params *CompatRemoveNetworkParams) (*CompatRemoveNetworkNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompatRemoveNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "compatRemoveNetwork",
		Method:             "DELETE",
		PathPattern:        "/networks/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CompatRemoveNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompatRemoveNetworkNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for compatRemoveNetwork: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
