// Code generated by go-swagger; DO NOT EDIT.

package images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLibpodImagesImportParams creates a new LibpodImagesImportParams object
// with the default values initialized.
func NewLibpodImagesImportParams() *LibpodImagesImportParams {
	var ()
	return &LibpodImagesImportParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLibpodImagesImportParamsWithTimeout creates a new LibpodImagesImportParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLibpodImagesImportParamsWithTimeout(timeout time.Duration) *LibpodImagesImportParams {
	var ()
	return &LibpodImagesImportParams{

		timeout: timeout,
	}
}

// NewLibpodImagesImportParamsWithContext creates a new LibpodImagesImportParams object
// with the default values initialized, and the ability to set a context for a request
func NewLibpodImagesImportParamsWithContext(ctx context.Context) *LibpodImagesImportParams {
	var ()
	return &LibpodImagesImportParams{

		Context: ctx,
	}
}

// NewLibpodImagesImportParamsWithHTTPClient creates a new LibpodImagesImportParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLibpodImagesImportParamsWithHTTPClient(client *http.Client) *LibpodImagesImportParams {
	var ()
	return &LibpodImagesImportParams{
		HTTPClient: client,
	}
}

/*LibpodImagesImportParams contains all the parameters to send to the API endpoint
for the libpod images import operation typically these are written to a http.Request
*/
type LibpodImagesImportParams struct {

	/*Changes
	  Apply the following possible instructions to the created image: CMD | ENTRYPOINT | ENV | EXPOSE | LABEL | STOPSIGNAL | USER | VOLUME | WORKDIR.  JSON encoded string

	*/
	Changes []string
	/*Message
	  Set commit message for imported image

	*/
	Message *string
	/*Reference
	  Optional Name[:TAG] for the image

	*/
	Reference *string
	/*Upload
	  tarball for imported image

	*/
	Upload runtime.NamedReadCloser
	/*URL
	  Load image from the specified URL

	*/
	URL *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the libpod images import params
func (o *LibpodImagesImportParams) WithTimeout(timeout time.Duration) *LibpodImagesImportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the libpod images import params
func (o *LibpodImagesImportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the libpod images import params
func (o *LibpodImagesImportParams) WithContext(ctx context.Context) *LibpodImagesImportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the libpod images import params
func (o *LibpodImagesImportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the libpod images import params
func (o *LibpodImagesImportParams) WithHTTPClient(client *http.Client) *LibpodImagesImportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the libpod images import params
func (o *LibpodImagesImportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChanges adds the changes to the libpod images import params
func (o *LibpodImagesImportParams) WithChanges(changes []string) *LibpodImagesImportParams {
	o.SetChanges(changes)
	return o
}

// SetChanges adds the changes to the libpod images import params
func (o *LibpodImagesImportParams) SetChanges(changes []string) {
	o.Changes = changes
}

// WithMessage adds the message to the libpod images import params
func (o *LibpodImagesImportParams) WithMessage(message *string) *LibpodImagesImportParams {
	o.SetMessage(message)
	return o
}

// SetMessage adds the message to the libpod images import params
func (o *LibpodImagesImportParams) SetMessage(message *string) {
	o.Message = message
}

// WithReference adds the reference to the libpod images import params
func (o *LibpodImagesImportParams) WithReference(reference *string) *LibpodImagesImportParams {
	o.SetReference(reference)
	return o
}

// SetReference adds the reference to the libpod images import params
func (o *LibpodImagesImportParams) SetReference(reference *string) {
	o.Reference = reference
}

// WithUpload adds the upload to the libpod images import params
func (o *LibpodImagesImportParams) WithUpload(upload runtime.NamedReadCloser) *LibpodImagesImportParams {
	o.SetUpload(upload)
	return o
}

// SetUpload adds the upload to the libpod images import params
func (o *LibpodImagesImportParams) SetUpload(upload runtime.NamedReadCloser) {
	o.Upload = upload
}

// WithURL adds the url to the libpod images import params
func (o *LibpodImagesImportParams) WithURL(url *string) *LibpodImagesImportParams {
	o.SetURL(url)
	return o
}

// SetURL adds the url to the libpod images import params
func (o *LibpodImagesImportParams) SetURL(url *string) {
	o.URL = url
}

// WriteToRequest writes these params to a swagger request
func (o *LibpodImagesImportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesChanges := o.Changes

	joinedChanges := swag.JoinByFormat(valuesChanges, "")
	// query array param changes
	if err := r.SetQueryParam("changes", joinedChanges...); err != nil {
		return err
	}

	if o.Message != nil {

		// query param message
		var qrMessage string
		if o.Message != nil {
			qrMessage = *o.Message
		}
		qMessage := qrMessage
		if qMessage != "" {
			if err := r.SetQueryParam("message", qMessage); err != nil {
				return err
			}
		}

	}

	if o.Reference != nil {

		// query param reference
		var qrReference string
		if o.Reference != nil {
			qrReference = *o.Reference
		}
		qReference := qrReference
		if qReference != "" {
			if err := r.SetQueryParam("reference", qReference); err != nil {
				return err
			}
		}

	}

	// form file param upload
	if err := r.SetFileParam("upload", o.Upload); err != nil {
		return err
	}

	if o.URL != nil {

		// query param url
		var qrURL string
		if o.URL != nil {
			qrURL = *o.URL
		}
		qURL := qrURL
		if qURL != "" {
			if err := r.SetQueryParam("url", qURL); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
