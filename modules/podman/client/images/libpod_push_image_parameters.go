// Code generated by go-swagger; DO NOT EDIT.

package images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLibpodPushImageParams creates a new LibpodPushImageParams object
// with the default values initialized.
func NewLibpodPushImageParams() *LibpodPushImageParams {
	var (
		tLSVerifyDefault = bool(true)
	)
	return &LibpodPushImageParams{
		TLSVerify: &tLSVerifyDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewLibpodPushImageParamsWithTimeout creates a new LibpodPushImageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLibpodPushImageParamsWithTimeout(timeout time.Duration) *LibpodPushImageParams {
	var (
		tLSVerifyDefault = bool(true)
	)
	return &LibpodPushImageParams{
		TLSVerify: &tLSVerifyDefault,

		timeout: timeout,
	}
}

// NewLibpodPushImageParamsWithContext creates a new LibpodPushImageParams object
// with the default values initialized, and the ability to set a context for a request
func NewLibpodPushImageParamsWithContext(ctx context.Context) *LibpodPushImageParams {
	var (
		tlsVerifyDefault = bool(true)
	)
	return &LibpodPushImageParams{
		TLSVerify: &tlsVerifyDefault,

		Context: ctx,
	}
}

// NewLibpodPushImageParamsWithHTTPClient creates a new LibpodPushImageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLibpodPushImageParamsWithHTTPClient(client *http.Client) *LibpodPushImageParams {
	var (
		tlsVerifyDefault = bool(true)
	)
	return &LibpodPushImageParams{
		TLSVerify:  &tlsVerifyDefault,
		HTTPClient: client,
	}
}

/*LibpodPushImageParams contains all the parameters to send to the API endpoint
for the libpod push image operation typically these are written to a http.Request
*/
type LibpodPushImageParams struct {

	/*XRegistryAuth
	  A base64-encoded auth configuration.

	*/
	XRegistryAuth *string
	/*Destination
	  Allows for pushing the image to a different destintation than the image refers to.

	*/
	Destination *string
	/*Name
	  Name of image to push.

	*/
	Name string
	/*TLSVerify
	  Require TLS verification.

	*/
	TLSVerify *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the libpod push image params
func (o *LibpodPushImageParams) WithTimeout(timeout time.Duration) *LibpodPushImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the libpod push image params
func (o *LibpodPushImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the libpod push image params
func (o *LibpodPushImageParams) WithContext(ctx context.Context) *LibpodPushImageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the libpod push image params
func (o *LibpodPushImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the libpod push image params
func (o *LibpodPushImageParams) WithHTTPClient(client *http.Client) *LibpodPushImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the libpod push image params
func (o *LibpodPushImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRegistryAuth adds the xRegistryAuth to the libpod push image params
func (o *LibpodPushImageParams) WithXRegistryAuth(xRegistryAuth *string) *LibpodPushImageParams {
	o.SetXRegistryAuth(xRegistryAuth)
	return o
}

// SetXRegistryAuth adds the xRegistryAuth to the libpod push image params
func (o *LibpodPushImageParams) SetXRegistryAuth(xRegistryAuth *string) {
	o.XRegistryAuth = xRegistryAuth
}

// WithDestination adds the destination to the libpod push image params
func (o *LibpodPushImageParams) WithDestination(destination *string) *LibpodPushImageParams {
	o.SetDestination(destination)
	return o
}

// SetDestination adds the destination to the libpod push image params
func (o *LibpodPushImageParams) SetDestination(destination *string) {
	o.Destination = destination
}

// WithName adds the name to the libpod push image params
func (o *LibpodPushImageParams) WithName(name string) *LibpodPushImageParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the libpod push image params
func (o *LibpodPushImageParams) SetName(name string) {
	o.Name = name
}

// WithTLSVerify adds the tLSVerify to the libpod push image params
func (o *LibpodPushImageParams) WithTLSVerify(tLSVerify *bool) *LibpodPushImageParams {
	o.SetTLSVerify(tLSVerify)
	return o
}

// SetTLSVerify adds the tlsVerify to the libpod push image params
func (o *LibpodPushImageParams) SetTLSVerify(tLSVerify *bool) {
	o.TLSVerify = tLSVerify
}

// WriteToRequest writes these params to a swagger request
func (o *LibpodPushImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRegistryAuth != nil {

		// header param X-Registry-Auth
		if err := r.SetHeaderParam("X-Registry-Auth", *o.XRegistryAuth); err != nil {
			return err
		}

	}

	if o.Destination != nil {

		// query param destination
		var qrDestination string
		if o.Destination != nil {
			qrDestination = *o.Destination
		}
		qDestination := qrDestination
		if qDestination != "" {
			if err := r.SetQueryParam("destination", qDestination); err != nil {
				return err
			}
		}

	}

	// path param name:.*
	if err := r.SetPathParam("name:.*", o.Name); err != nil {
		return err
	}

	if o.TLSVerify != nil {

		// query param tlsVerify
		var qrTLSVerify bool
		if o.TLSVerify != nil {
			qrTLSVerify = *o.TLSVerify
		}
		qTLSVerify := swag.FormatBool(qrTLSVerify)
		if qTLSVerify != "" {
			if err := r.SetQueryParam("tlsVerify", qTLSVerify); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
