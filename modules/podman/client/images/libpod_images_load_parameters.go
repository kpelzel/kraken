// Code generated by go-swagger; DO NOT EDIT.

package images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewLibpodImagesLoadParams creates a new LibpodImagesLoadParams object
// with the default values initialized.
func NewLibpodImagesLoadParams() *LibpodImagesLoadParams {
	var ()
	return &LibpodImagesLoadParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLibpodImagesLoadParamsWithTimeout creates a new LibpodImagesLoadParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLibpodImagesLoadParamsWithTimeout(timeout time.Duration) *LibpodImagesLoadParams {
	var ()
	return &LibpodImagesLoadParams{

		timeout: timeout,
	}
}

// NewLibpodImagesLoadParamsWithContext creates a new LibpodImagesLoadParams object
// with the default values initialized, and the ability to set a context for a request
func NewLibpodImagesLoadParamsWithContext(ctx context.Context) *LibpodImagesLoadParams {
	var ()
	return &LibpodImagesLoadParams{

		Context: ctx,
	}
}

// NewLibpodImagesLoadParamsWithHTTPClient creates a new LibpodImagesLoadParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLibpodImagesLoadParamsWithHTTPClient(client *http.Client) *LibpodImagesLoadParams {
	var ()
	return &LibpodImagesLoadParams{
		HTTPClient: client,
	}
}

/*LibpodImagesLoadParams contains all the parameters to send to the API endpoint
for the libpod images load operation typically these are written to a http.Request
*/
type LibpodImagesLoadParams struct {

	/*Reference
	  Optional Name[:TAG] for the image

	*/
	Reference *string
	/*Upload
	  tarball of container image

	*/
	Upload runtime.NamedReadCloser

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the libpod images load params
func (o *LibpodImagesLoadParams) WithTimeout(timeout time.Duration) *LibpodImagesLoadParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the libpod images load params
func (o *LibpodImagesLoadParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the libpod images load params
func (o *LibpodImagesLoadParams) WithContext(ctx context.Context) *LibpodImagesLoadParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the libpod images load params
func (o *LibpodImagesLoadParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the libpod images load params
func (o *LibpodImagesLoadParams) WithHTTPClient(client *http.Client) *LibpodImagesLoadParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the libpod images load params
func (o *LibpodImagesLoadParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithReference adds the reference to the libpod images load params
func (o *LibpodImagesLoadParams) WithReference(reference *string) *LibpodImagesLoadParams {
	o.SetReference(reference)
	return o
}

// SetReference adds the reference to the libpod images load params
func (o *LibpodImagesLoadParams) SetReference(reference *string) {
	o.Reference = reference
}

// WithUpload adds the upload to the libpod images load params
func (o *LibpodImagesLoadParams) WithUpload(upload runtime.NamedReadCloser) *LibpodImagesLoadParams {
	o.SetUpload(upload)
	return o
}

// SetUpload adds the upload to the libpod images load params
func (o *LibpodImagesLoadParams) SetUpload(upload runtime.NamedReadCloser) {
	o.Upload = upload
}

// WriteToRequest writes these params to a swagger request
func (o *LibpodImagesLoadParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Reference != nil {

		// query param reference
		var qrReference string
		if o.Reference != nil {
			qrReference = *o.Reference
		}
		qReference := qrReference
		if qReference != "" {
			if err := r.SetQueryParam("reference", qReference); err != nil {
				return err
			}
		}

	}

	// form file param upload
	if err := r.SetFileParam("upload", o.Upload); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
