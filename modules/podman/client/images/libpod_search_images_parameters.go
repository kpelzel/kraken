// Code generated by go-swagger; DO NOT EDIT.

package images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLibpodSearchImagesParams creates a new LibpodSearchImagesParams object
// with the default values initialized.
func NewLibpodSearchImagesParams() *LibpodSearchImagesParams {
	var ()
	return &LibpodSearchImagesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLibpodSearchImagesParamsWithTimeout creates a new LibpodSearchImagesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLibpodSearchImagesParamsWithTimeout(timeout time.Duration) *LibpodSearchImagesParams {
	var ()
	return &LibpodSearchImagesParams{

		timeout: timeout,
	}
}

// NewLibpodSearchImagesParamsWithContext creates a new LibpodSearchImagesParams object
// with the default values initialized, and the ability to set a context for a request
func NewLibpodSearchImagesParamsWithContext(ctx context.Context) *LibpodSearchImagesParams {
	var ()
	return &LibpodSearchImagesParams{

		Context: ctx,
	}
}

// NewLibpodSearchImagesParamsWithHTTPClient creates a new LibpodSearchImagesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLibpodSearchImagesParamsWithHTTPClient(client *http.Client) *LibpodSearchImagesParams {
	var ()
	return &LibpodSearchImagesParams{
		HTTPClient: client,
	}
}

/*LibpodSearchImagesParams contains all the parameters to send to the API endpoint
for the libpod search images operation typically these are written to a http.Request
*/
type LibpodSearchImagesParams struct {

	/*Filters
	  A JSON encoded value of the filters (a `map[string][]string`) to process on the images list. Available filters:
	- `is-automated=(true|false)`
	- `is-official=(true|false)`
	- `stars=<number>` Matches images that has at least 'number' stars.


	*/
	Filters *string
	/*Limit
	  maximum number of results

	*/
	Limit *int64
	/*NoTrunc
	  do not truncate any of the result strings

	*/
	NoTrunc *bool
	/*Term
	  term to search

	*/
	Term *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the libpod search images params
func (o *LibpodSearchImagesParams) WithTimeout(timeout time.Duration) *LibpodSearchImagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the libpod search images params
func (o *LibpodSearchImagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the libpod search images params
func (o *LibpodSearchImagesParams) WithContext(ctx context.Context) *LibpodSearchImagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the libpod search images params
func (o *LibpodSearchImagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the libpod search images params
func (o *LibpodSearchImagesParams) WithHTTPClient(client *http.Client) *LibpodSearchImagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the libpod search images params
func (o *LibpodSearchImagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilters adds the filters to the libpod search images params
func (o *LibpodSearchImagesParams) WithFilters(filters *string) *LibpodSearchImagesParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the libpod search images params
func (o *LibpodSearchImagesParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WithLimit adds the limit to the libpod search images params
func (o *LibpodSearchImagesParams) WithLimit(limit *int64) *LibpodSearchImagesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the libpod search images params
func (o *LibpodSearchImagesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNoTrunc adds the noTrunc to the libpod search images params
func (o *LibpodSearchImagesParams) WithNoTrunc(noTrunc *bool) *LibpodSearchImagesParams {
	o.SetNoTrunc(noTrunc)
	return o
}

// SetNoTrunc adds the noTrunc to the libpod search images params
func (o *LibpodSearchImagesParams) SetNoTrunc(noTrunc *bool) {
	o.NoTrunc = noTrunc
}

// WithTerm adds the term to the libpod search images params
func (o *LibpodSearchImagesParams) WithTerm(term *string) *LibpodSearchImagesParams {
	o.SetTerm(term)
	return o
}

// SetTerm adds the term to the libpod search images params
func (o *LibpodSearchImagesParams) SetTerm(term *string) {
	o.Term = term
}

// WriteToRequest writes these params to a swagger request
func (o *LibpodSearchImagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.NoTrunc != nil {

		// query param noTrunc
		var qrNoTrunc bool
		if o.NoTrunc != nil {
			qrNoTrunc = *o.NoTrunc
		}
		qNoTrunc := swag.FormatBool(qrNoTrunc)
		if qNoTrunc != "" {
			if err := r.SetQueryParam("noTrunc", qNoTrunc); err != nil {
				return err
			}
		}

	}

	if o.Term != nil {

		// query param term
		var qrTerm string
		if o.Term != nil {
			qrTerm = *o.Term
		}
		qTerm := qrTerm
		if qTerm != "" {
			if err := r.SetQueryParam("term", qTerm); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
