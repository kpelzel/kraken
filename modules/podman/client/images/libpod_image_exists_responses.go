// Code generated by go-swagger; DO NOT EDIT.

package images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LibpodImageExistsReader is a Reader for the LibpodImageExists structure.
type LibpodImageExistsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LibpodImageExistsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewLibpodImageExistsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewLibpodImageExistsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLibpodImageExistsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLibpodImageExistsNoContent creates a LibpodImageExistsNoContent with default headers values
func NewLibpodImageExistsNoContent() *LibpodImageExistsNoContent {
	return &LibpodImageExistsNoContent{}
}

/*LibpodImageExistsNoContent handles this case with default header values.

image exists
*/
type LibpodImageExistsNoContent struct {
}

func (o *LibpodImageExistsNoContent) Error() string {
	return fmt.Sprintf("[GET /libpod/images/{name:.*}/exists][%d] libpodImageExistsNoContent ", 204)
}

func (o *LibpodImageExistsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLibpodImageExistsNotFound creates a LibpodImageExistsNotFound with default headers values
func NewLibpodImageExistsNotFound() *LibpodImageExistsNotFound {
	return &LibpodImageExistsNotFound{}
}

/*LibpodImageExistsNotFound handles this case with default header values.

No such image
*/
type LibpodImageExistsNotFound struct {
	Payload *LibpodImageExistsNotFoundBody
}

func (o *LibpodImageExistsNotFound) Error() string {
	return fmt.Sprintf("[GET /libpod/images/{name:.*}/exists][%d] libpodImageExistsNotFound  %+v", 404, o.Payload)
}

func (o *LibpodImageExistsNotFound) GetPayload() *LibpodImageExistsNotFoundBody {
	return o.Payload
}

func (o *LibpodImageExistsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodImageExistsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLibpodImageExistsInternalServerError creates a LibpodImageExistsInternalServerError with default headers values
func NewLibpodImageExistsInternalServerError() *LibpodImageExistsInternalServerError {
	return &LibpodImageExistsInternalServerError{}
}

/*LibpodImageExistsInternalServerError handles this case with default header values.

Internal server error
*/
type LibpodImageExistsInternalServerError struct {
	Payload *LibpodImageExistsInternalServerErrorBody
}

func (o *LibpodImageExistsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /libpod/images/{name:.*}/exists][%d] libpodImageExistsInternalServerError  %+v", 500, o.Payload)
}

func (o *LibpodImageExistsInternalServerError) GetPayload() *LibpodImageExistsInternalServerErrorBody {
	return o.Payload
}

func (o *LibpodImageExistsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodImageExistsInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*LibpodImageExistsInternalServerErrorBody libpod image exists internal server error body
swagger:model LibpodImageExistsInternalServerErrorBody
*/
type LibpodImageExistsInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this libpod image exists internal server error body
func (o *LibpodImageExistsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod image exists internal server error body based on context it is used
func (o *LibpodImageExistsInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodImageExistsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodImageExistsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res LibpodImageExistsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodImageExistsNotFoundBody libpod image exists not found body
swagger:model LibpodImageExistsNotFoundBody
*/
type LibpodImageExistsNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this libpod image exists not found body
func (o *LibpodImageExistsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod image exists not found body based on context it is used
func (o *LibpodImageExistsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodImageExistsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodImageExistsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res LibpodImageExistsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
