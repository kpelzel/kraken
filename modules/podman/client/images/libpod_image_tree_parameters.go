// Code generated by go-swagger; DO NOT EDIT.

package images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLibpodImageTreeParams creates a new LibpodImageTreeParams object
// with the default values initialized.
func NewLibpodImageTreeParams() *LibpodImageTreeParams {
	var ()
	return &LibpodImageTreeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLibpodImageTreeParamsWithTimeout creates a new LibpodImageTreeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLibpodImageTreeParamsWithTimeout(timeout time.Duration) *LibpodImageTreeParams {
	var ()
	return &LibpodImageTreeParams{

		timeout: timeout,
	}
}

// NewLibpodImageTreeParamsWithContext creates a new LibpodImageTreeParams object
// with the default values initialized, and the ability to set a context for a request
func NewLibpodImageTreeParamsWithContext(ctx context.Context) *LibpodImageTreeParams {
	var ()
	return &LibpodImageTreeParams{

		Context: ctx,
	}
}

// NewLibpodImageTreeParamsWithHTTPClient creates a new LibpodImageTreeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLibpodImageTreeParamsWithHTTPClient(client *http.Client) *LibpodImageTreeParams {
	var ()
	return &LibpodImageTreeParams{
		HTTPClient: client,
	}
}

/*LibpodImageTreeParams contains all the parameters to send to the API endpoint
for the libpod image tree operation typically these are written to a http.Request
*/
type LibpodImageTreeParams struct {

	/*Name
	  the name or ID of the container

	*/
	Name string
	/*Whatrequires
	  show all child images and layers of the specified image

	*/
	Whatrequires *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the libpod image tree params
func (o *LibpodImageTreeParams) WithTimeout(timeout time.Duration) *LibpodImageTreeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the libpod image tree params
func (o *LibpodImageTreeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the libpod image tree params
func (o *LibpodImageTreeParams) WithContext(ctx context.Context) *LibpodImageTreeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the libpod image tree params
func (o *LibpodImageTreeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the libpod image tree params
func (o *LibpodImageTreeParams) WithHTTPClient(client *http.Client) *LibpodImageTreeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the libpod image tree params
func (o *LibpodImageTreeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the libpod image tree params
func (o *LibpodImageTreeParams) WithName(name string) *LibpodImageTreeParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the libpod image tree params
func (o *LibpodImageTreeParams) SetName(name string) {
	o.Name = name
}

// WithWhatrequires adds the whatrequires to the libpod image tree params
func (o *LibpodImageTreeParams) WithWhatrequires(whatrequires *bool) *LibpodImageTreeParams {
	o.SetWhatrequires(whatrequires)
	return o
}

// SetWhatrequires adds the whatrequires to the libpod image tree params
func (o *LibpodImageTreeParams) SetWhatrequires(whatrequires *bool) {
	o.Whatrequires = whatrequires
}

// WriteToRequest writes these params to a swagger request
func (o *LibpodImageTreeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name:.*
	if err := r.SetPathParam("name:.*", o.Name); err != nil {
		return err
	}

	if o.Whatrequires != nil {

		// query param whatrequires
		var qrWhatrequires bool
		if o.Whatrequires != nil {
			qrWhatrequires = *o.Whatrequires
		}
		qWhatrequires := swag.FormatBool(qrWhatrequires)
		if qWhatrequires != "" {
			if err := r.SetQueryParam("whatrequires", qWhatrequires); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
