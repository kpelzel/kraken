// Code generated by go-swagger; DO NOT EDIT.

package volumes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new volumes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for volumes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	LibpodCreateVolume(params *LibpodCreateVolumeParams) (*LibpodCreateVolumeCreated, error)

	LibpodInspectVolume(params *LibpodInspectVolumeParams) (*LibpodInspectVolumeOK, error)

	LibpodListVolumes(params *LibpodListVolumesParams) (*LibpodListVolumesOK, error)

	LibpodPruneVolumes(params *LibpodPruneVolumesParams) (*LibpodPruneVolumesOK, error)

	LibpodRemoveVolume(params *LibpodRemoveVolumeParams) (*LibpodRemoveVolumeNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  LibpodCreateVolume creates a volume
*/
func (a *Client) LibpodCreateVolume(params *LibpodCreateVolumeParams) (*LibpodCreateVolumeCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodCreateVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodCreateVolume",
		Method:             "POST",
		PathPattern:        "/libpod/volumes/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodCreateVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodCreateVolumeCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodCreateVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodInspectVolume inspects volume
*/
func (a *Client) LibpodInspectVolume(params *LibpodInspectVolumeParams) (*LibpodInspectVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodInspectVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodInspectVolume",
		Method:             "GET",
		PathPattern:        "/libpod/volumes/{name}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodInspectVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodInspectVolumeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodInspectVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodListVolumes lists volumes

  Returns a list of volumes
*/
func (a *Client) LibpodListVolumes(params *LibpodListVolumesParams) (*LibpodListVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodListVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodListVolumes",
		Method:             "GET",
		PathPattern:        "/libpod/volumes/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodListVolumesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodListVolumesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodListVolumes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodPruneVolumes prunes volumes
*/
func (a *Client) LibpodPruneVolumes(params *LibpodPruneVolumesParams) (*LibpodPruneVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodPruneVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodPruneVolumes",
		Method:             "POST",
		PathPattern:        "/libpod/volumes/prune",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodPruneVolumesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodPruneVolumesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodPruneVolumes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodRemoveVolume removes volume
*/
func (a *Client) LibpodRemoveVolume(params *LibpodRemoveVolumeParams) (*LibpodRemoveVolumeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodRemoveVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodRemoveVolume",
		Method:             "DELETE",
		PathPattern:        "/libpod/volumes/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodRemoveVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodRemoveVolumeNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodRemoveVolume: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
