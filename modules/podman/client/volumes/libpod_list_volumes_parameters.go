// Code generated by go-swagger; DO NOT EDIT.

package volumes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewLibpodListVolumesParams creates a new LibpodListVolumesParams object
// with the default values initialized.
func NewLibpodListVolumesParams() *LibpodListVolumesParams {
	var ()
	return &LibpodListVolumesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLibpodListVolumesParamsWithTimeout creates a new LibpodListVolumesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLibpodListVolumesParamsWithTimeout(timeout time.Duration) *LibpodListVolumesParams {
	var ()
	return &LibpodListVolumesParams{

		timeout: timeout,
	}
}

// NewLibpodListVolumesParamsWithContext creates a new LibpodListVolumesParams object
// with the default values initialized, and the ability to set a context for a request
func NewLibpodListVolumesParamsWithContext(ctx context.Context) *LibpodListVolumesParams {
	var ()
	return &LibpodListVolumesParams{

		Context: ctx,
	}
}

// NewLibpodListVolumesParamsWithHTTPClient creates a new LibpodListVolumesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLibpodListVolumesParamsWithHTTPClient(client *http.Client) *LibpodListVolumesParams {
	var ()
	return &LibpodListVolumesParams{
		HTTPClient: client,
	}
}

/*LibpodListVolumesParams contains all the parameters to send to the API endpoint
for the libpod list volumes operation typically these are written to a http.Request
*/
type LibpodListVolumesParams struct {

	/*Filters
	  JSON encoded value of the filters (a map[string][]string) to process on the volumes list. Available filters:
	  - driver=<volume-driver-name> Matches volumes based on their driver.
	  - label=<key> or label=<key>:<value> Matches volumes based on the presence of a label alone or a label and a value.
	  - name=<volume-name> Matches all of volume name.
	  - opt=<driver-option> Matches a storage driver options


	*/
	Filters *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the libpod list volumes params
func (o *LibpodListVolumesParams) WithTimeout(timeout time.Duration) *LibpodListVolumesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the libpod list volumes params
func (o *LibpodListVolumesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the libpod list volumes params
func (o *LibpodListVolumesParams) WithContext(ctx context.Context) *LibpodListVolumesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the libpod list volumes params
func (o *LibpodListVolumesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the libpod list volumes params
func (o *LibpodListVolumesParams) WithHTTPClient(client *http.Client) *LibpodListVolumesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the libpod list volumes params
func (o *LibpodListVolumesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilters adds the filters to the libpod list volumes params
func (o *LibpodListVolumesParams) WithFilters(filters *string) *LibpodListVolumesParams {
	o.SetFilters(filters)
	return o
}

// SetFilters adds the filters to the libpod list volumes params
func (o *LibpodListVolumesParams) SetFilters(filters *string) {
	o.Filters = filters
}

// WriteToRequest writes these params to a swagger request
func (o *LibpodListVolumesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Filters != nil {

		// query param filters
		var qrFilters string
		if o.Filters != nil {
			qrFilters = *o.Filters
		}
		qFilters := qrFilters
		if qFilters != "" {
			if err := r.SetQueryParam("filters", qFilters); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
