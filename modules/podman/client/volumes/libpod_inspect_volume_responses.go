// Code generated by go-swagger; DO NOT EDIT.

package volumes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LibpodInspectVolumeReader is a Reader for the LibpodInspectVolume structure.
type LibpodInspectVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LibpodInspectVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLibpodInspectVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewLibpodInspectVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLibpodInspectVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLibpodInspectVolumeOK creates a LibpodInspectVolumeOK with default headers values
func NewLibpodInspectVolumeOK() *LibpodInspectVolumeOK {
	return &LibpodInspectVolumeOK{}
}

/*LibpodInspectVolumeOK handles this case with default header values.

Volume create response
*/
type LibpodInspectVolumeOK struct {
	Payload *LibpodInspectVolumeOKBody
}

func (o *LibpodInspectVolumeOK) Error() string {
	return fmt.Sprintf("[GET /libpod/volumes/{name}/json][%d] libpodInspectVolumeOK  %+v", 200, o.Payload)
}

func (o *LibpodInspectVolumeOK) GetPayload() *LibpodInspectVolumeOKBody {
	return o.Payload
}

func (o *LibpodInspectVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodInspectVolumeOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLibpodInspectVolumeNotFound creates a LibpodInspectVolumeNotFound with default headers values
func NewLibpodInspectVolumeNotFound() *LibpodInspectVolumeNotFound {
	return &LibpodInspectVolumeNotFound{}
}

/*LibpodInspectVolumeNotFound handles this case with default header values.

No such volume
*/
type LibpodInspectVolumeNotFound struct {
	Payload *LibpodInspectVolumeNotFoundBody
}

func (o *LibpodInspectVolumeNotFound) Error() string {
	return fmt.Sprintf("[GET /libpod/volumes/{name}/json][%d] libpodInspectVolumeNotFound  %+v", 404, o.Payload)
}

func (o *LibpodInspectVolumeNotFound) GetPayload() *LibpodInspectVolumeNotFoundBody {
	return o.Payload
}

func (o *LibpodInspectVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodInspectVolumeNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLibpodInspectVolumeInternalServerError creates a LibpodInspectVolumeInternalServerError with default headers values
func NewLibpodInspectVolumeInternalServerError() *LibpodInspectVolumeInternalServerError {
	return &LibpodInspectVolumeInternalServerError{}
}

/*LibpodInspectVolumeInternalServerError handles this case with default header values.

Internal server error
*/
type LibpodInspectVolumeInternalServerError struct {
	Payload *LibpodInspectVolumeInternalServerErrorBody
}

func (o *LibpodInspectVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /libpod/volumes/{name}/json][%d] libpodInspectVolumeInternalServerError  %+v", 500, o.Payload)
}

func (o *LibpodInspectVolumeInternalServerError) GetPayload() *LibpodInspectVolumeInternalServerErrorBody {
	return o.Payload
}

func (o *LibpodInspectVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodInspectVolumeInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*LibpodInspectVolumeInternalServerErrorBody libpod inspect volume internal server error body
swagger:model LibpodInspectVolumeInternalServerErrorBody
*/
type LibpodInspectVolumeInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this libpod inspect volume internal server error body
func (o *LibpodInspectVolumeInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod inspect volume internal server error body based on context it is used
func (o *LibpodInspectVolumeInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodInspectVolumeInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodInspectVolumeInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res LibpodInspectVolumeInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodInspectVolumeNotFoundBody libpod inspect volume not found body
swagger:model LibpodInspectVolumeNotFoundBody
*/
type LibpodInspectVolumeNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this libpod inspect volume not found body
func (o *LibpodInspectVolumeNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod inspect volume not found body based on context it is used
func (o *LibpodInspectVolumeNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodInspectVolumeNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodInspectVolumeNotFoundBody) UnmarshalBinary(b []byte) error {
	var res LibpodInspectVolumeNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodInspectVolumeOKBody libpod inspect volume o k body
swagger:model LibpodInspectVolumeOKBody
*/
type LibpodInspectVolumeOKBody struct {

	// Anonymous indicates that the volume was created as an anonymous
	// volume for a specific container, and will be be removed when any
	// container using it is removed.
	Anonymous bool `json:"Anonymous,omitempty"`

	// CreatedAt is the date and time the volume was created at. This is not
	// stored for older Libpod volumes; if so, it will be omitted.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"CreatedAt,omitempty"`

	// Driver is the driver used to create the volume.
	// This will be properly implemented in a future version.
	Driver string `json:"Driver,omitempty"`

	// GID is the GID that the volume was created with.
	GID int64 `json:"GID,omitempty"`

	// Labels includes the volume's configured labels, key:value pairs that
	// can be passed during volume creation to provide information for third
	// party tools.
	Labels map[string]string `json:"Labels,omitempty"`

	// Mountpoint is the path on the host where the volume is mounted.
	Mountpoint string `json:"Mountpoint,omitempty"`

	// Name is the name of the volume.
	Name string `json:"Name,omitempty"`

	// Options is a set of options that were used when creating the volume.
	// It is presently not used.
	Options map[string]string `json:"Options,omitempty"`

	// Scope is unused and provided solely for Docker compatibility. It is
	// unconditionally set to "local".
	Scope string `json:"Scope,omitempty"`

	// Status is presently unused and provided only for Docker compatibility.
	// In the future it will be used to return information on the volume's
	// current state.
	Status map[string]string `json:"Status,omitempty"`

	// UID is the UID that the volume was created with.
	UID int64 `json:"UID,omitempty"`
}

// Validate validates this libpod inspect volume o k body
func (o *LibpodInspectVolumeOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LibpodInspectVolumeOKBody) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(o.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("libpodInspectVolumeOK"+"."+"CreatedAt", "body", "date-time", o.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this libpod inspect volume o k body based on context it is used
func (o *LibpodInspectVolumeOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodInspectVolumeOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodInspectVolumeOKBody) UnmarshalBinary(b []byte) error {
	var res LibpodInspectVolumeOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
