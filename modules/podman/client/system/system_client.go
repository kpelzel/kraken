// Code generated by go-swagger; DO NOT EDIT.

package system

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new system API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for system API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	SystemVersion(params *SystemVersionParams) (*SystemVersionOK, error)

	Df(params *DfParams) (*DfOK, error)

	LibpodGetEvents(params *LibpodGetEventsParams) (*LibpodGetEventsOK, error)

	LibpodGetInfo(params *LibpodGetInfoParams) (*LibpodGetInfoOK, error)

	PruneSystem(params *PruneSystemParams) (*PruneSystemOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SystemVersion components version information
*/
func (a *Client) SystemVersion(params *SystemVersionParams) (*SystemVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSystemVersionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SystemVersion",
		Method:             "GET",
		PathPattern:        "/libpod/version",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SystemVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SystemVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SystemVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Df shows disk usage

  Return information about disk usage for containers, images, and volumes
*/
func (a *Client) Df(params *DfParams) (*DfOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDfParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "df",
		Method:             "GET",
		PathPattern:        "/libpod/system/df",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DfReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DfOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for df: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodGetEvents gets events

  Returns events filtered on query parameters
*/
func (a *Client) LibpodGetEvents(params *LibpodGetEventsParams) (*LibpodGetEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodGetEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodGetEvents",
		Method:             "GET",
		PathPattern:        "/libpod/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodGetEventsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodGetEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodGetEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodGetInfo gets info

  Returns information on the system and libpod configuration
*/
func (a *Client) LibpodGetInfo(params *LibpodGetInfoParams) (*LibpodGetInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodGetInfoParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodGetInfo",
		Method:             "GET",
		PathPattern:        "/libpod/info",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodGetInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodGetInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodGetInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PruneSystem prunes unused data
*/
func (a *Client) PruneSystem(params *PruneSystemParams) (*PruneSystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPruneSystemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "pruneSystem",
		Method:             "POST",
		PathPattern:        "/libpod/system/prune",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PruneSystemReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PruneSystemOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for pruneSystem: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
