// Code generated by go-swagger; DO NOT EDIT.

package exec

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new exec API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for exec API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	LibpodCreateExec(params *LibpodCreateExecParams) (*LibpodCreateExecCreated, error)

	LibpodInspectExec(params *LibpodInspectExecParams) (*LibpodInspectExecOK, error)

	LibpodResizeExec(params *LibpodResizeExecParams) (*LibpodResizeExecCreated, error)

	LibpodStartExec(params *LibpodStartExecParams) (*LibpodStartExecOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  LibpodCreateExec creates an exec instance

  Create an exec session to run a command inside a running container. Exec sessions will be automatically removed 5 minutes after they exit.
*/
func (a *Client) LibpodCreateExec(params *LibpodCreateExecParams) (*LibpodCreateExecCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodCreateExecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodCreateExec",
		Method:             "POST",
		PathPattern:        "/libpod/containers/{name}/exec",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodCreateExecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodCreateExecCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodCreateExec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodInspectExec inspects an exec instance

  Return low-level information about an exec instance.
*/
func (a *Client) LibpodInspectExec(params *LibpodInspectExecParams) (*LibpodInspectExecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodInspectExecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodInspectExec",
		Method:             "GET",
		PathPattern:        "/libpod/exec/{id}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodInspectExecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodInspectExecOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodInspectExec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodResizeExec resizes an exec instance

  Resize the TTY session used by an exec instance. This endpoint only works if tty was specified as part of creating and starting the exec instance.

*/
func (a *Client) LibpodResizeExec(params *LibpodResizeExecParams) (*LibpodResizeExecCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodResizeExecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodResizeExec",
		Method:             "POST",
		PathPattern:        "/libpod/exec/{id}/resize",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodResizeExecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodResizeExecCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodResizeExec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  LibpodStartExec starts an exec instance

  Starts a previously set up exec instance. If detach is true, this endpoint returns immediately after starting the command. Otherwise, it sets up an interactive session with the command.
*/
func (a *Client) LibpodStartExec(params *LibpodStartExecParams) (*LibpodStartExecOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLibpodStartExecParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "libpodStartExec",
		Method:             "POST",
		PathPattern:        "/libpod/exec/{id}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &LibpodStartExecReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LibpodStartExecOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for libpodStartExec: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
