// Code generated by go-swagger; DO NOT EDIT.

package exec

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LibpodStartExecReader is a Reader for the LibpodStartExec structure.
type LibpodStartExecReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LibpodStartExecReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLibpodStartExecOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewLibpodStartExecNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewLibpodStartExecConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLibpodStartExecInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLibpodStartExecOK creates a LibpodStartExecOK with default headers values
func NewLibpodStartExecOK() *LibpodStartExecOK {
	return &LibpodStartExecOK{}
}

/*LibpodStartExecOK handles this case with default header values.

no error
*/
type LibpodStartExecOK struct {
}

func (o *LibpodStartExecOK) Error() string {
	return fmt.Sprintf("[POST /libpod/exec/{id}/start][%d] libpodStartExecOK ", 200)
}

func (o *LibpodStartExecOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLibpodStartExecNotFound creates a LibpodStartExecNotFound with default headers values
func NewLibpodStartExecNotFound() *LibpodStartExecNotFound {
	return &LibpodStartExecNotFound{}
}

/*LibpodStartExecNotFound handles this case with default header values.

No such exec instance
*/
type LibpodStartExecNotFound struct {
	Payload *LibpodStartExecNotFoundBody
}

func (o *LibpodStartExecNotFound) Error() string {
	return fmt.Sprintf("[POST /libpod/exec/{id}/start][%d] libpodStartExecNotFound  %+v", 404, o.Payload)
}

func (o *LibpodStartExecNotFound) GetPayload() *LibpodStartExecNotFoundBody {
	return o.Payload
}

func (o *LibpodStartExecNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodStartExecNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLibpodStartExecConflict creates a LibpodStartExecConflict with default headers values
func NewLibpodStartExecConflict() *LibpodStartExecConflict {
	return &LibpodStartExecConflict{}
}

/*LibpodStartExecConflict handles this case with default header values.

container is not running.
*/
type LibpodStartExecConflict struct {
}

func (o *LibpodStartExecConflict) Error() string {
	return fmt.Sprintf("[POST /libpod/exec/{id}/start][%d] libpodStartExecConflict ", 409)
}

func (o *LibpodStartExecConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLibpodStartExecInternalServerError creates a LibpodStartExecInternalServerError with default headers values
func NewLibpodStartExecInternalServerError() *LibpodStartExecInternalServerError {
	return &LibpodStartExecInternalServerError{}
}

/*LibpodStartExecInternalServerError handles this case with default header values.

Internal server error
*/
type LibpodStartExecInternalServerError struct {
	Payload *LibpodStartExecInternalServerErrorBody
}

func (o *LibpodStartExecInternalServerError) Error() string {
	return fmt.Sprintf("[POST /libpod/exec/{id}/start][%d] libpodStartExecInternalServerError  %+v", 500, o.Payload)
}

func (o *LibpodStartExecInternalServerError) GetPayload() *LibpodStartExecInternalServerErrorBody {
	return o.Payload
}

func (o *LibpodStartExecInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodStartExecInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*LibpodStartExecBody libpod start exec body
swagger:model LibpodStartExecBody
*/
type LibpodStartExecBody struct {

	// Detach from the command. Not presently supported.
	Detach bool `json:"Detach,omitempty"`

	// Allocate a pseudo-TTY. Presently ignored.
	Tty bool `json:"Tty,omitempty"`
}

// Validate validates this libpod start exec body
func (o *LibpodStartExecBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod start exec body based on context it is used
func (o *LibpodStartExecBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodStartExecBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodStartExecBody) UnmarshalBinary(b []byte) error {
	var res LibpodStartExecBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodStartExecInternalServerErrorBody libpod start exec internal server error body
swagger:model LibpodStartExecInternalServerErrorBody
*/
type LibpodStartExecInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this libpod start exec internal server error body
func (o *LibpodStartExecInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod start exec internal server error body based on context it is used
func (o *LibpodStartExecInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodStartExecInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodStartExecInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res LibpodStartExecInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodStartExecNotFoundBody libpod start exec not found body
swagger:model LibpodStartExecNotFoundBody
*/
type LibpodStartExecNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this libpod start exec not found body
func (o *LibpodStartExecNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod start exec not found body based on context it is used
func (o *LibpodStartExecNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodStartExecNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodStartExecNotFoundBody) UnmarshalBinary(b []byte) error {
	var res LibpodStartExecNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
