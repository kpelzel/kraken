// Code generated by go-swagger; DO NOT EDIT.

package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/hpc/kraken/modules/podman/models"
)

// LibpodGetContainerReader is a Reader for the LibpodGetContainer structure.
type LibpodGetContainerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LibpodGetContainerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLibpodGetContainerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewLibpodGetContainerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLibpodGetContainerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLibpodGetContainerOK creates a LibpodGetContainerOK with default headers values
func NewLibpodGetContainerOK() *LibpodGetContainerOK {
	return &LibpodGetContainerOK{}
}

/*LibpodGetContainerOK handles this case with default header values.

Inspect container
*/
type LibpodGetContainerOK struct {
	Payload *LibpodGetContainerOKBody
}

func (o *LibpodGetContainerOK) Error() string {
	return fmt.Sprintf("[GET /libpod/containers/{name}/json][%d] libpodGetContainerOK  %+v", 200, o.Payload)
}

func (o *LibpodGetContainerOK) GetPayload() *LibpodGetContainerOKBody {
	return o.Payload
}

func (o *LibpodGetContainerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodGetContainerOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLibpodGetContainerNotFound creates a LibpodGetContainerNotFound with default headers values
func NewLibpodGetContainerNotFound() *LibpodGetContainerNotFound {
	return &LibpodGetContainerNotFound{}
}

/*LibpodGetContainerNotFound handles this case with default header values.

No such container
*/
type LibpodGetContainerNotFound struct {
	Payload *LibpodGetContainerNotFoundBody
}

func (o *LibpodGetContainerNotFound) Error() string {
	return fmt.Sprintf("[GET /libpod/containers/{name}/json][%d] libpodGetContainerNotFound  %+v", 404, o.Payload)
}

func (o *LibpodGetContainerNotFound) GetPayload() *LibpodGetContainerNotFoundBody {
	return o.Payload
}

func (o *LibpodGetContainerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodGetContainerNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLibpodGetContainerInternalServerError creates a LibpodGetContainerInternalServerError with default headers values
func NewLibpodGetContainerInternalServerError() *LibpodGetContainerInternalServerError {
	return &LibpodGetContainerInternalServerError{}
}

/*LibpodGetContainerInternalServerError handles this case with default header values.

Internal server error
*/
type LibpodGetContainerInternalServerError struct {
	Payload *LibpodGetContainerInternalServerErrorBody
}

func (o *LibpodGetContainerInternalServerError) Error() string {
	return fmt.Sprintf("[GET /libpod/containers/{name}/json][%d] libpodGetContainerInternalServerError  %+v", 500, o.Payload)
}

func (o *LibpodGetContainerInternalServerError) GetPayload() *LibpodGetContainerInternalServerErrorBody {
	return o.Payload
}

func (o *LibpodGetContainerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodGetContainerInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*LibpodGetContainerInternalServerErrorBody libpod get container internal server error body
swagger:model LibpodGetContainerInternalServerErrorBody
*/
type LibpodGetContainerInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this libpod get container internal server error body
func (o *LibpodGetContainerInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod get container internal server error body based on context it is used
func (o *LibpodGetContainerInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodGetContainerInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodGetContainerInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res LibpodGetContainerInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodGetContainerNotFoundBody libpod get container not found body
swagger:model LibpodGetContainerNotFoundBody
*/
type LibpodGetContainerNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this libpod get container not found body
func (o *LibpodGetContainerNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod get container not found body based on context it is used
func (o *LibpodGetContainerNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodGetContainerNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodGetContainerNotFoundBody) UnmarshalBinary(b []byte) error {
	var res LibpodGetContainerNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodGetContainerOKBody libpod get container o k body
swagger:model LibpodGetContainerOKBody
*/
type LibpodGetContainerOKBody struct {

	// app armor profile
	AppArmorProfile string `json:"AppArmorProfile,omitempty"`

	// args
	Args []string `json:"Args"`

	// bounding caps
	BoundingCaps []string `json:"BoundingCaps"`

	// config
	Config *models.InspectContainerConfig `json:"Config,omitempty"`

	// conmon pid file
	ConmonPidFile string `json:"ConmonPidFile,omitempty"`

	// created
	// Format: date-time
	Created strfmt.DateTime `json:"Created,omitempty"`

	// dependencies
	Dependencies []string `json:"Dependencies"`

	// driver
	Driver string `json:"Driver,omitempty"`

	// effective caps
	EffectiveCaps []string `json:"EffectiveCaps"`

	// exec i ds
	ExecIDs []string `json:"ExecIDs"`

	// exit command
	ExitCommand []string `json:"ExitCommand"`

	// graph driver
	GraphDriver *models.Data `json:"GraphDriver,omitempty"`

	// host config
	HostConfig *models.InspectContainerHostConfig `json:"HostConfig,omitempty"`

	// hostname path
	HostnamePath string `json:"HostnamePath,omitempty"`

	// hosts path
	HostsPath string `json:"HostsPath,omitempty"`

	// ID
	ID string `json:"Id,omitempty"`

	// image
	Image string `json:"Image,omitempty"`

	// image name
	ImageName string `json:"ImageName,omitempty"`

	// is infra
	IsInfra bool `json:"IsInfra,omitempty"`

	// log path
	LogPath string `json:"LogPath,omitempty"`

	// log tag
	LogTag string `json:"LogTag,omitempty"`

	// mount label
	MountLabel string `json:"MountLabel,omitempty"`

	// mounts
	Mounts []*models.InspectMount `json:"Mounts"`

	// name
	Name string `json:"Name,omitempty"`

	// namespace
	Namespace string `json:"Namespace,omitempty"`

	// network settings
	NetworkSettings *models.InspectNetworkSettings `json:"NetworkSettings,omitempty"`

	// o c i config path
	OCIConfigPath string `json:"OCIConfigPath,omitempty"`

	// o c i runtime
	OCIRuntime string `json:"OCIRuntime,omitempty"`

	// path
	Path string `json:"Path,omitempty"`

	// pod
	Pod string `json:"Pod,omitempty"`

	// process label
	ProcessLabel string `json:"ProcessLabel,omitempty"`

	// resolv conf path
	ResolvConfPath string `json:"ResolvConfPath,omitempty"`

	// restart count
	RestartCount int32 `json:"RestartCount,omitempty"`

	// rootfs
	Rootfs string `json:"Rootfs,omitempty"`

	// size root fs
	SizeRootFs int64 `json:"SizeRootFs,omitempty"`

	// size rw
	SizeRw int64 `json:"SizeRw,omitempty"`

	// state
	State *models.InspectContainerState `json:"State,omitempty"`

	// static dir
	StaticDir string `json:"StaticDir,omitempty"`
}

// Validate validates this libpod get container o k body
func (o *LibpodGetContainerOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateGraphDriver(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateHostConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMounts(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateNetworkSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LibpodGetContainerOKBody) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.Config) { // not required
		return nil
	}

	if o.Config != nil {
		if err := o.Config.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodGetContainerOK" + "." + "Config")
			}
			return err
		}
	}

	return nil
}

func (o *LibpodGetContainerOKBody) validateCreated(formats strfmt.Registry) error {
	if swag.IsZero(o.Created) { // not required
		return nil
	}

	if err := validate.FormatOf("libpodGetContainerOK"+"."+"Created", "body", "date-time", o.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (o *LibpodGetContainerOKBody) validateGraphDriver(formats strfmt.Registry) error {
	if swag.IsZero(o.GraphDriver) { // not required
		return nil
	}

	if o.GraphDriver != nil {
		if err := o.GraphDriver.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodGetContainerOK" + "." + "GraphDriver")
			}
			return err
		}
	}

	return nil
}

func (o *LibpodGetContainerOKBody) validateHostConfig(formats strfmt.Registry) error {
	if swag.IsZero(o.HostConfig) { // not required
		return nil
	}

	if o.HostConfig != nil {
		if err := o.HostConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodGetContainerOK" + "." + "HostConfig")
			}
			return err
		}
	}

	return nil
}

func (o *LibpodGetContainerOKBody) validateMounts(formats strfmt.Registry) error {
	if swag.IsZero(o.Mounts) { // not required
		return nil
	}

	for i := 0; i < len(o.Mounts); i++ {
		if swag.IsZero(o.Mounts[i]) { // not required
			continue
		}

		if o.Mounts[i] != nil {
			if err := o.Mounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("libpodGetContainerOK" + "." + "Mounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *LibpodGetContainerOKBody) validateNetworkSettings(formats strfmt.Registry) error {
	if swag.IsZero(o.NetworkSettings) { // not required
		return nil
	}

	if o.NetworkSettings != nil {
		if err := o.NetworkSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodGetContainerOK" + "." + "NetworkSettings")
			}
			return err
		}
	}

	return nil
}

func (o *LibpodGetContainerOKBody) validateState(formats strfmt.Registry) error {
	if swag.IsZero(o.State) { // not required
		return nil
	}

	if o.State != nil {
		if err := o.State.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodGetContainerOK" + "." + "State")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this libpod get container o k body based on the context it is used
func (o *LibpodGetContainerOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateGraphDriver(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateHostConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateNetworkSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LibpodGetContainerOKBody) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if o.Config != nil {
		if err := o.Config.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodGetContainerOK" + "." + "Config")
			}
			return err
		}
	}

	return nil
}

func (o *LibpodGetContainerOKBody) contextValidateGraphDriver(ctx context.Context, formats strfmt.Registry) error {

	if o.GraphDriver != nil {
		if err := o.GraphDriver.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodGetContainerOK" + "." + "GraphDriver")
			}
			return err
		}
	}

	return nil
}

func (o *LibpodGetContainerOKBody) contextValidateHostConfig(ctx context.Context, formats strfmt.Registry) error {

	if o.HostConfig != nil {
		if err := o.HostConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodGetContainerOK" + "." + "HostConfig")
			}
			return err
		}
	}

	return nil
}

func (o *LibpodGetContainerOKBody) contextValidateMounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Mounts); i++ {

		if o.Mounts[i] != nil {
			if err := o.Mounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("libpodGetContainerOK" + "." + "Mounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *LibpodGetContainerOKBody) contextValidateNetworkSettings(ctx context.Context, formats strfmt.Registry) error {

	if o.NetworkSettings != nil {
		if err := o.NetworkSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodGetContainerOK" + "." + "NetworkSettings")
			}
			return err
		}
	}

	return nil
}

func (o *LibpodGetContainerOKBody) contextValidateState(ctx context.Context, formats strfmt.Registry) error {

	if o.State != nil {
		if err := o.State.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("libpodGetContainerOK" + "." + "State")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *LibpodGetContainerOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodGetContainerOKBody) UnmarshalBinary(b []byte) error {
	var res LibpodGetContainerOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
