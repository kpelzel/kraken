// Code generated by go-swagger; DO NOT EDIT.

package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLibpodAttachContainerParams creates a new LibpodAttachContainerParams object
// with the default values initialized.
func NewLibpodAttachContainerParams() *LibpodAttachContainerParams {
	var (
		streamDefault = bool(true)
	)
	return &LibpodAttachContainerParams{
		Stream: &streamDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewLibpodAttachContainerParamsWithTimeout creates a new LibpodAttachContainerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLibpodAttachContainerParamsWithTimeout(timeout time.Duration) *LibpodAttachContainerParams {
	var (
		streamDefault = bool(true)
	)
	return &LibpodAttachContainerParams{
		Stream: &streamDefault,

		timeout: timeout,
	}
}

// NewLibpodAttachContainerParamsWithContext creates a new LibpodAttachContainerParams object
// with the default values initialized, and the ability to set a context for a request
func NewLibpodAttachContainerParamsWithContext(ctx context.Context) *LibpodAttachContainerParams {
	var (
		streamDefault = bool(true)
	)
	return &LibpodAttachContainerParams{
		Stream: &streamDefault,

		Context: ctx,
	}
}

// NewLibpodAttachContainerParamsWithHTTPClient creates a new LibpodAttachContainerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLibpodAttachContainerParamsWithHTTPClient(client *http.Client) *LibpodAttachContainerParams {
	var (
		streamDefault = bool(true)
	)
	return &LibpodAttachContainerParams{
		Stream:     &streamDefault,
		HTTPClient: client,
	}
}

/*LibpodAttachContainerParams contains all the parameters to send to the API endpoint
for the libpod attach container operation typically these are written to a http.Request
*/
type LibpodAttachContainerParams struct {

	/*DetachKeys
	  keys to use for detaching from the container

	*/
	DetachKeys *string
	/*Logs
	  Stream all logs from the container across the connection. Happens before streaming attach (if requested). At least one of logs or stream must be set

	*/
	Logs *bool
	/*Name
	  the name or ID of the container

	*/
	Name string
	/*Stderr
	  Attach to container STDERR

	*/
	Stderr *bool
	/*Stdin
	  Attach to container STDIN

	*/
	Stdin *bool
	/*Stdout
	  Attach to container STDOUT

	*/
	Stdout *bool
	/*Stream
	  Attach to the container. If unset, and logs is set, only the container's logs will be sent. At least one of stream or logs must be set

	*/
	Stream *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the libpod attach container params
func (o *LibpodAttachContainerParams) WithTimeout(timeout time.Duration) *LibpodAttachContainerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the libpod attach container params
func (o *LibpodAttachContainerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the libpod attach container params
func (o *LibpodAttachContainerParams) WithContext(ctx context.Context) *LibpodAttachContainerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the libpod attach container params
func (o *LibpodAttachContainerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the libpod attach container params
func (o *LibpodAttachContainerParams) WithHTTPClient(client *http.Client) *LibpodAttachContainerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the libpod attach container params
func (o *LibpodAttachContainerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDetachKeys adds the detachKeys to the libpod attach container params
func (o *LibpodAttachContainerParams) WithDetachKeys(detachKeys *string) *LibpodAttachContainerParams {
	o.SetDetachKeys(detachKeys)
	return o
}

// SetDetachKeys adds the detachKeys to the libpod attach container params
func (o *LibpodAttachContainerParams) SetDetachKeys(detachKeys *string) {
	o.DetachKeys = detachKeys
}

// WithLogs adds the logs to the libpod attach container params
func (o *LibpodAttachContainerParams) WithLogs(logs *bool) *LibpodAttachContainerParams {
	o.SetLogs(logs)
	return o
}

// SetLogs adds the logs to the libpod attach container params
func (o *LibpodAttachContainerParams) SetLogs(logs *bool) {
	o.Logs = logs
}

// WithName adds the name to the libpod attach container params
func (o *LibpodAttachContainerParams) WithName(name string) *LibpodAttachContainerParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the libpod attach container params
func (o *LibpodAttachContainerParams) SetName(name string) {
	o.Name = name
}

// WithStderr adds the stderr to the libpod attach container params
func (o *LibpodAttachContainerParams) WithStderr(stderr *bool) *LibpodAttachContainerParams {
	o.SetStderr(stderr)
	return o
}

// SetStderr adds the stderr to the libpod attach container params
func (o *LibpodAttachContainerParams) SetStderr(stderr *bool) {
	o.Stderr = stderr
}

// WithStdin adds the stdin to the libpod attach container params
func (o *LibpodAttachContainerParams) WithStdin(stdin *bool) *LibpodAttachContainerParams {
	o.SetStdin(stdin)
	return o
}

// SetStdin adds the stdin to the libpod attach container params
func (o *LibpodAttachContainerParams) SetStdin(stdin *bool) {
	o.Stdin = stdin
}

// WithStdout adds the stdout to the libpod attach container params
func (o *LibpodAttachContainerParams) WithStdout(stdout *bool) *LibpodAttachContainerParams {
	o.SetStdout(stdout)
	return o
}

// SetStdout adds the stdout to the libpod attach container params
func (o *LibpodAttachContainerParams) SetStdout(stdout *bool) {
	o.Stdout = stdout
}

// WithStream adds the stream to the libpod attach container params
func (o *LibpodAttachContainerParams) WithStream(stream *bool) *LibpodAttachContainerParams {
	o.SetStream(stream)
	return o
}

// SetStream adds the stream to the libpod attach container params
func (o *LibpodAttachContainerParams) SetStream(stream *bool) {
	o.Stream = stream
}

// WriteToRequest writes these params to a swagger request
func (o *LibpodAttachContainerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DetachKeys != nil {

		// query param detachKeys
		var qrDetachKeys string
		if o.DetachKeys != nil {
			qrDetachKeys = *o.DetachKeys
		}
		qDetachKeys := qrDetachKeys
		if qDetachKeys != "" {
			if err := r.SetQueryParam("detachKeys", qDetachKeys); err != nil {
				return err
			}
		}

	}

	if o.Logs != nil {

		// query param logs
		var qrLogs bool
		if o.Logs != nil {
			qrLogs = *o.Logs
		}
		qLogs := swag.FormatBool(qrLogs)
		if qLogs != "" {
			if err := r.SetQueryParam("logs", qLogs); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.Stderr != nil {

		// query param stderr
		var qrStderr bool
		if o.Stderr != nil {
			qrStderr = *o.Stderr
		}
		qStderr := swag.FormatBool(qrStderr)
		if qStderr != "" {
			if err := r.SetQueryParam("stderr", qStderr); err != nil {
				return err
			}
		}

	}

	if o.Stdin != nil {

		// query param stdin
		var qrStdin bool
		if o.Stdin != nil {
			qrStdin = *o.Stdin
		}
		qStdin := swag.FormatBool(qrStdin)
		if qStdin != "" {
			if err := r.SetQueryParam("stdin", qStdin); err != nil {
				return err
			}
		}

	}

	if o.Stdout != nil {

		// query param stdout
		var qrStdout bool
		if o.Stdout != nil {
			qrStdout = *o.Stdout
		}
		qStdout := swag.FormatBool(qrStdout)
		if qStdout != "" {
			if err := r.SetQueryParam("stdout", qStdout); err != nil {
				return err
			}
		}

	}

	if o.Stream != nil {

		// query param stream
		var qrStream bool
		if o.Stream != nil {
			qrStream = *o.Stream
		}
		qStream := swag.FormatBool(qrStream)
		if qStream != "" {
			if err := r.SetQueryParam("stream", qStream); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
