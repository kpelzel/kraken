// Code generated by go-swagger; DO NOT EDIT.

package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLibpodGenerateSystemdParams creates a new LibpodGenerateSystemdParams object
// with the default values initialized.
func NewLibpodGenerateSystemdParams() *LibpodGenerateSystemdParams {
	var (
		containerPrefixDefault = string("container")
		newDefault             = bool(false)
		podPrefixDefault       = string("pod")
		restartPolicyDefault   = string("on-failure")
		separatorDefault       = string("-")
		timeDefault            = int64(10)
		useNameDefault         = bool(false)
	)
	return &LibpodGenerateSystemdParams{
		ContainerPrefix: &containerPrefixDefault,
		New:             &newDefault,
		PodPrefix:       &podPrefixDefault,
		RestartPolicy:   &restartPolicyDefault,
		Separator:       &separatorDefault,
		Time:            &timeDefault,
		UseName:         &useNameDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewLibpodGenerateSystemdParamsWithTimeout creates a new LibpodGenerateSystemdParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLibpodGenerateSystemdParamsWithTimeout(timeout time.Duration) *LibpodGenerateSystemdParams {
	var (
		containerPrefixDefault = string("container")
		newDefault             = bool(false)
		podPrefixDefault       = string("pod")
		restartPolicyDefault   = string("on-failure")
		separatorDefault       = string("-")
		timeDefault            = int64(10)
		useNameDefault         = bool(false)
	)
	return &LibpodGenerateSystemdParams{
		ContainerPrefix: &containerPrefixDefault,
		New:             &newDefault,
		PodPrefix:       &podPrefixDefault,
		RestartPolicy:   &restartPolicyDefault,
		Separator:       &separatorDefault,
		Time:            &timeDefault,
		UseName:         &useNameDefault,

		timeout: timeout,
	}
}

// NewLibpodGenerateSystemdParamsWithContext creates a new LibpodGenerateSystemdParams object
// with the default values initialized, and the ability to set a context for a request
func NewLibpodGenerateSystemdParamsWithContext(ctx context.Context) *LibpodGenerateSystemdParams {
	var (
		containerPrefixDefault = string("container")
		newDefault             = bool(false)
		podPrefixDefault       = string("pod")
		restartPolicyDefault   = string("on-failure")
		separatorDefault       = string("-")
		timeDefault            = int64(10)
		useNameDefault         = bool(false)
	)
	return &LibpodGenerateSystemdParams{
		ContainerPrefix: &containerPrefixDefault,
		New:             &newDefault,
		PodPrefix:       &podPrefixDefault,
		RestartPolicy:   &restartPolicyDefault,
		Separator:       &separatorDefault,
		Time:            &timeDefault,
		UseName:         &useNameDefault,

		Context: ctx,
	}
}

// NewLibpodGenerateSystemdParamsWithHTTPClient creates a new LibpodGenerateSystemdParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLibpodGenerateSystemdParamsWithHTTPClient(client *http.Client) *LibpodGenerateSystemdParams {
	var (
		containerPrefixDefault = string("container")
		newDefault             = bool(false)
		podPrefixDefault       = string("pod")
		restartPolicyDefault   = string("on-failure")
		separatorDefault       = string("-")
		timeDefault            = int64(10)
		useNameDefault         = bool(false)
	)
	return &LibpodGenerateSystemdParams{
		ContainerPrefix: &containerPrefixDefault,
		New:             &newDefault,
		PodPrefix:       &podPrefixDefault,
		RestartPolicy:   &restartPolicyDefault,
		Separator:       &separatorDefault,
		Time:            &timeDefault,
		UseName:         &useNameDefault,
		HTTPClient:      client,
	}
}

/*LibpodGenerateSystemdParams contains all the parameters to send to the API endpoint
for the libpod generate systemd operation typically these are written to a http.Request
*/
type LibpodGenerateSystemdParams struct {

	/*ContainerPrefix
	  Systemd unit name prefix for containers.

	*/
	ContainerPrefix *string
	/*Name
	  Name or ID of the container or pod.

	*/
	Name string
	/*New
	  Create a new container instead of starting an existing one.

	*/
	New *bool
	/*PodPrefix
	  Systemd unit name prefix for pods.

	*/
	PodPrefix *string
	/*RestartPolicy
	  Systemd restart-policy.

	*/
	RestartPolicy *string
	/*Separator
	  Systemd unit name separator between name/id and prefix.

	*/
	Separator *string
	/*Time
	  Stop timeout override.

	*/
	Time *int64
	/*UseName
	  Use container/pod names instead of IDs.

	*/
	UseName *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) WithTimeout(timeout time.Duration) *LibpodGenerateSystemdParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) WithContext(ctx context.Context) *LibpodGenerateSystemdParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) WithHTTPClient(client *http.Client) *LibpodGenerateSystemdParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContainerPrefix adds the containerPrefix to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) WithContainerPrefix(containerPrefix *string) *LibpodGenerateSystemdParams {
	o.SetContainerPrefix(containerPrefix)
	return o
}

// SetContainerPrefix adds the containerPrefix to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) SetContainerPrefix(containerPrefix *string) {
	o.ContainerPrefix = containerPrefix
}

// WithName adds the name to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) WithName(name string) *LibpodGenerateSystemdParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) SetName(name string) {
	o.Name = name
}

// WithNew adds the new to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) WithNew(new *bool) *LibpodGenerateSystemdParams {
	o.SetNew(new)
	return o
}

// SetNew adds the new to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) SetNew(new *bool) {
	o.New = new
}

// WithPodPrefix adds the podPrefix to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) WithPodPrefix(podPrefix *string) *LibpodGenerateSystemdParams {
	o.SetPodPrefix(podPrefix)
	return o
}

// SetPodPrefix adds the podPrefix to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) SetPodPrefix(podPrefix *string) {
	o.PodPrefix = podPrefix
}

// WithRestartPolicy adds the restartPolicy to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) WithRestartPolicy(restartPolicy *string) *LibpodGenerateSystemdParams {
	o.SetRestartPolicy(restartPolicy)
	return o
}

// SetRestartPolicy adds the restartPolicy to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) SetRestartPolicy(restartPolicy *string) {
	o.RestartPolicy = restartPolicy
}

// WithSeparator adds the separator to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) WithSeparator(separator *string) *LibpodGenerateSystemdParams {
	o.SetSeparator(separator)
	return o
}

// SetSeparator adds the separator to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) SetSeparator(separator *string) {
	o.Separator = separator
}

// WithTime adds the time to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) WithTime(time *int64) *LibpodGenerateSystemdParams {
	o.SetTime(time)
	return o
}

// SetTime adds the time to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) SetTime(time *int64) {
	o.Time = time
}

// WithUseName adds the useName to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) WithUseName(useName *bool) *LibpodGenerateSystemdParams {
	o.SetUseName(useName)
	return o
}

// SetUseName adds the useName to the libpod generate systemd params
func (o *LibpodGenerateSystemdParams) SetUseName(useName *bool) {
	o.UseName = useName
}

// WriteToRequest writes these params to a swagger request
func (o *LibpodGenerateSystemdParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContainerPrefix != nil {

		// query param containerPrefix
		var qrContainerPrefix string
		if o.ContainerPrefix != nil {
			qrContainerPrefix = *o.ContainerPrefix
		}
		qContainerPrefix := qrContainerPrefix
		if qContainerPrefix != "" {
			if err := r.SetQueryParam("containerPrefix", qContainerPrefix); err != nil {
				return err
			}
		}

	}

	// path param name:.*
	if err := r.SetPathParam("name:.*", o.Name); err != nil {
		return err
	}

	if o.New != nil {

		// query param new
		var qrNew bool
		if o.New != nil {
			qrNew = *o.New
		}
		qNew := swag.FormatBool(qrNew)
		if qNew != "" {
			if err := r.SetQueryParam("new", qNew); err != nil {
				return err
			}
		}

	}

	if o.PodPrefix != nil {

		// query param podPrefix
		var qrPodPrefix string
		if o.PodPrefix != nil {
			qrPodPrefix = *o.PodPrefix
		}
		qPodPrefix := qrPodPrefix
		if qPodPrefix != "" {
			if err := r.SetQueryParam("podPrefix", qPodPrefix); err != nil {
				return err
			}
		}

	}

	if o.RestartPolicy != nil {

		// query param restartPolicy
		var qrRestartPolicy string
		if o.RestartPolicy != nil {
			qrRestartPolicy = *o.RestartPolicy
		}
		qRestartPolicy := qrRestartPolicy
		if qRestartPolicy != "" {
			if err := r.SetQueryParam("restartPolicy", qRestartPolicy); err != nil {
				return err
			}
		}

	}

	if o.Separator != nil {

		// query param separator
		var qrSeparator string
		if o.Separator != nil {
			qrSeparator = *o.Separator
		}
		qSeparator := qrSeparator
		if qSeparator != "" {
			if err := r.SetQueryParam("separator", qSeparator); err != nil {
				return err
			}
		}

	}

	if o.Time != nil {

		// query param time
		var qrTime int64
		if o.Time != nil {
			qrTime = *o.Time
		}
		qTime := swag.FormatInt64(qrTime)
		if qTime != "" {
			if err := r.SetQueryParam("time", qTime); err != nil {
				return err
			}
		}

	}

	if o.UseName != nil {

		// query param useName
		var qrUseName bool
		if o.UseName != nil {
			qrUseName = *o.UseName
		}
		qUseName := swag.FormatBool(qrUseName)
		if qUseName != "" {
			if err := r.SetQueryParam("useName", qUseName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
