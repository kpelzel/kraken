// Code generated by go-swagger; DO NOT EDIT.

package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LibpodContainerExistsReader is a Reader for the LibpodContainerExists structure.
type LibpodContainerExistsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LibpodContainerExistsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewLibpodContainerExistsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewLibpodContainerExistsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLibpodContainerExistsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLibpodContainerExistsNoContent creates a LibpodContainerExistsNoContent with default headers values
func NewLibpodContainerExistsNoContent() *LibpodContainerExistsNoContent {
	return &LibpodContainerExistsNoContent{}
}

/*LibpodContainerExistsNoContent handles this case with default header values.

container exists
*/
type LibpodContainerExistsNoContent struct {
}

func (o *LibpodContainerExistsNoContent) Error() string {
	return fmt.Sprintf("[GET /libpod/containers/{name}/exists][%d] libpodContainerExistsNoContent ", 204)
}

func (o *LibpodContainerExistsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLibpodContainerExistsNotFound creates a LibpodContainerExistsNotFound with default headers values
func NewLibpodContainerExistsNotFound() *LibpodContainerExistsNotFound {
	return &LibpodContainerExistsNotFound{}
}

/*LibpodContainerExistsNotFound handles this case with default header values.

No such container
*/
type LibpodContainerExistsNotFound struct {
	Payload *LibpodContainerExistsNotFoundBody
}

func (o *LibpodContainerExistsNotFound) Error() string {
	return fmt.Sprintf("[GET /libpod/containers/{name}/exists][%d] libpodContainerExistsNotFound  %+v", 404, o.Payload)
}

func (o *LibpodContainerExistsNotFound) GetPayload() *LibpodContainerExistsNotFoundBody {
	return o.Payload
}

func (o *LibpodContainerExistsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodContainerExistsNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLibpodContainerExistsInternalServerError creates a LibpodContainerExistsInternalServerError with default headers values
func NewLibpodContainerExistsInternalServerError() *LibpodContainerExistsInternalServerError {
	return &LibpodContainerExistsInternalServerError{}
}

/*LibpodContainerExistsInternalServerError handles this case with default header values.

Internal server error
*/
type LibpodContainerExistsInternalServerError struct {
	Payload *LibpodContainerExistsInternalServerErrorBody
}

func (o *LibpodContainerExistsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /libpod/containers/{name}/exists][%d] libpodContainerExistsInternalServerError  %+v", 500, o.Payload)
}

func (o *LibpodContainerExistsInternalServerError) GetPayload() *LibpodContainerExistsInternalServerErrorBody {
	return o.Payload
}

func (o *LibpodContainerExistsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodContainerExistsInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*LibpodContainerExistsInternalServerErrorBody libpod container exists internal server error body
swagger:model LibpodContainerExistsInternalServerErrorBody
*/
type LibpodContainerExistsInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this libpod container exists internal server error body
func (o *LibpodContainerExistsInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod container exists internal server error body based on context it is used
func (o *LibpodContainerExistsInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodContainerExistsInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodContainerExistsInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res LibpodContainerExistsInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodContainerExistsNotFoundBody libpod container exists not found body
swagger:model LibpodContainerExistsNotFoundBody
*/
type LibpodContainerExistsNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this libpod container exists not found body
func (o *LibpodContainerExistsNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod container exists not found body based on context it is used
func (o *LibpodContainerExistsNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodContainerExistsNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodContainerExistsNotFoundBody) UnmarshalBinary(b []byte) error {
	var res LibpodContainerExistsNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
