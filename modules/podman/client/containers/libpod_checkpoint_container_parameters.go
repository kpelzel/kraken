// Code generated by go-swagger; DO NOT EDIT.

package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLibpodCheckpointContainerParams creates a new LibpodCheckpointContainerParams object
// with the default values initialized.
func NewLibpodCheckpointContainerParams() *LibpodCheckpointContainerParams {
	var ()
	return &LibpodCheckpointContainerParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLibpodCheckpointContainerParamsWithTimeout creates a new LibpodCheckpointContainerParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLibpodCheckpointContainerParamsWithTimeout(timeout time.Duration) *LibpodCheckpointContainerParams {
	var ()
	return &LibpodCheckpointContainerParams{

		timeout: timeout,
	}
}

// NewLibpodCheckpointContainerParamsWithContext creates a new LibpodCheckpointContainerParams object
// with the default values initialized, and the ability to set a context for a request
func NewLibpodCheckpointContainerParamsWithContext(ctx context.Context) *LibpodCheckpointContainerParams {
	var ()
	return &LibpodCheckpointContainerParams{

		Context: ctx,
	}
}

// NewLibpodCheckpointContainerParamsWithHTTPClient creates a new LibpodCheckpointContainerParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLibpodCheckpointContainerParamsWithHTTPClient(client *http.Client) *LibpodCheckpointContainerParams {
	var ()
	return &LibpodCheckpointContainerParams{
		HTTPClient: client,
	}
}

/*LibpodCheckpointContainerParams contains all the parameters to send to the API endpoint
for the libpod checkpoint container operation typically these are written to a http.Request
*/
type LibpodCheckpointContainerParams struct {

	/*Export
	  export the checkpoint image to a tar.gz

	*/
	Export *bool
	/*IgnoreRootFS
	  do not include root file-system changes when exporting

	*/
	IgnoreRootFS *bool
	/*Keep
	  keep all temporary checkpoint files

	*/
	Keep *bool
	/*LeaveRunning
	  leave the container running after writing checkpoint to disk

	*/
	LeaveRunning *bool
	/*Name
	  the name or ID of the container

	*/
	Name string
	/*TCPEstablished
	  checkpoint a container with established TCP connections

	*/
	TCPEstablished *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) WithTimeout(timeout time.Duration) *LibpodCheckpointContainerParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) WithContext(ctx context.Context) *LibpodCheckpointContainerParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) WithHTTPClient(client *http.Client) *LibpodCheckpointContainerParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExport adds the export to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) WithExport(export *bool) *LibpodCheckpointContainerParams {
	o.SetExport(export)
	return o
}

// SetExport adds the export to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) SetExport(export *bool) {
	o.Export = export
}

// WithIgnoreRootFS adds the ignoreRootFS to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) WithIgnoreRootFS(ignoreRootFS *bool) *LibpodCheckpointContainerParams {
	o.SetIgnoreRootFS(ignoreRootFS)
	return o
}

// SetIgnoreRootFS adds the ignoreRootFS to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) SetIgnoreRootFS(ignoreRootFS *bool) {
	o.IgnoreRootFS = ignoreRootFS
}

// WithKeep adds the keep to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) WithKeep(keep *bool) *LibpodCheckpointContainerParams {
	o.SetKeep(keep)
	return o
}

// SetKeep adds the keep to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) SetKeep(keep *bool) {
	o.Keep = keep
}

// WithLeaveRunning adds the leaveRunning to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) WithLeaveRunning(leaveRunning *bool) *LibpodCheckpointContainerParams {
	o.SetLeaveRunning(leaveRunning)
	return o
}

// SetLeaveRunning adds the leaveRunning to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) SetLeaveRunning(leaveRunning *bool) {
	o.LeaveRunning = leaveRunning
}

// WithName adds the name to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) WithName(name string) *LibpodCheckpointContainerParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) SetName(name string) {
	o.Name = name
}

// WithTCPEstablished adds the tCPEstablished to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) WithTCPEstablished(tCPEstablished *bool) *LibpodCheckpointContainerParams {
	o.SetTCPEstablished(tCPEstablished)
	return o
}

// SetTCPEstablished adds the tcpEstablished to the libpod checkpoint container params
func (o *LibpodCheckpointContainerParams) SetTCPEstablished(tCPEstablished *bool) {
	o.TCPEstablished = tCPEstablished
}

// WriteToRequest writes these params to a swagger request
func (o *LibpodCheckpointContainerParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Export != nil {

		// query param export
		var qrExport bool
		if o.Export != nil {
			qrExport = *o.Export
		}
		qExport := swag.FormatBool(qrExport)
		if qExport != "" {
			if err := r.SetQueryParam("export", qExport); err != nil {
				return err
			}
		}

	}

	if o.IgnoreRootFS != nil {

		// query param ignoreRootFS
		var qrIgnoreRootFS bool
		if o.IgnoreRootFS != nil {
			qrIgnoreRootFS = *o.IgnoreRootFS
		}
		qIgnoreRootFS := swag.FormatBool(qrIgnoreRootFS)
		if qIgnoreRootFS != "" {
			if err := r.SetQueryParam("ignoreRootFS", qIgnoreRootFS); err != nil {
				return err
			}
		}

	}

	if o.Keep != nil {

		// query param keep
		var qrKeep bool
		if o.Keep != nil {
			qrKeep = *o.Keep
		}
		qKeep := swag.FormatBool(qrKeep)
		if qKeep != "" {
			if err := r.SetQueryParam("keep", qKeep); err != nil {
				return err
			}
		}

	}

	if o.LeaveRunning != nil {

		// query param leaveRunning
		var qrLeaveRunning bool
		if o.LeaveRunning != nil {
			qrLeaveRunning = *o.LeaveRunning
		}
		qLeaveRunning := swag.FormatBool(qrLeaveRunning)
		if qLeaveRunning != "" {
			if err := r.SetQueryParam("leaveRunning", qLeaveRunning); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.TCPEstablished != nil {

		// query param tcpEstablished
		var qrTCPEstablished bool
		if o.TCPEstablished != nil {
			qrTCPEstablished = *o.TCPEstablished
		}
		qTCPEstablished := swag.FormatBool(qrTCPEstablished)
		if qTCPEstablished != "" {
			if err := r.SetQueryParam("tcpEstablished", qTCPEstablished); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
