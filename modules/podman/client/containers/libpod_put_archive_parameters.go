// Code generated by go-swagger; DO NOT EDIT.

package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewLibpodPutArchiveParams creates a new LibpodPutArchiveParams object
// with the default values initialized.
func NewLibpodPutArchiveParams() *LibpodPutArchiveParams {
	var (
		pauseDefault = bool(true)
	)
	return &LibpodPutArchiveParams{
		Pause: &pauseDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewLibpodPutArchiveParamsWithTimeout creates a new LibpodPutArchiveParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLibpodPutArchiveParamsWithTimeout(timeout time.Duration) *LibpodPutArchiveParams {
	var (
		pauseDefault = bool(true)
	)
	return &LibpodPutArchiveParams{
		Pause: &pauseDefault,

		timeout: timeout,
	}
}

// NewLibpodPutArchiveParamsWithContext creates a new LibpodPutArchiveParams object
// with the default values initialized, and the ability to set a context for a request
func NewLibpodPutArchiveParamsWithContext(ctx context.Context) *LibpodPutArchiveParams {
	var (
		pauseDefault = bool(true)
	)
	return &LibpodPutArchiveParams{
		Pause: &pauseDefault,

		Context: ctx,
	}
}

// NewLibpodPutArchiveParamsWithHTTPClient creates a new LibpodPutArchiveParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLibpodPutArchiveParamsWithHTTPClient(client *http.Client) *LibpodPutArchiveParams {
	var (
		pauseDefault = bool(true)
	)
	return &LibpodPutArchiveParams{
		Pause:      &pauseDefault,
		HTTPClient: client,
	}
}

/*LibpodPutArchiveParams contains all the parameters to send to the API endpoint
for the libpod put archive operation typically these are written to a http.Request
*/
type LibpodPutArchiveParams struct {

	/*Name
	  container name or id

	*/
	Name string
	/*Path
	  Path to a directory in the container to extract

	*/
	Path string
	/*Pause
	  pause the container while copying (defaults to true)

	*/
	Pause *bool
	/*Request
	  tarfile of files to copy into the container

	*/
	Request string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the libpod put archive params
func (o *LibpodPutArchiveParams) WithTimeout(timeout time.Duration) *LibpodPutArchiveParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the libpod put archive params
func (o *LibpodPutArchiveParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the libpod put archive params
func (o *LibpodPutArchiveParams) WithContext(ctx context.Context) *LibpodPutArchiveParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the libpod put archive params
func (o *LibpodPutArchiveParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the libpod put archive params
func (o *LibpodPutArchiveParams) WithHTTPClient(client *http.Client) *LibpodPutArchiveParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the libpod put archive params
func (o *LibpodPutArchiveParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the libpod put archive params
func (o *LibpodPutArchiveParams) WithName(name string) *LibpodPutArchiveParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the libpod put archive params
func (o *LibpodPutArchiveParams) SetName(name string) {
	o.Name = name
}

// WithPath adds the path to the libpod put archive params
func (o *LibpodPutArchiveParams) WithPath(path string) *LibpodPutArchiveParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the libpod put archive params
func (o *LibpodPutArchiveParams) SetPath(path string) {
	o.Path = path
}

// WithPause adds the pause to the libpod put archive params
func (o *LibpodPutArchiveParams) WithPause(pause *bool) *LibpodPutArchiveParams {
	o.SetPause(pause)
	return o
}

// SetPause adds the pause to the libpod put archive params
func (o *LibpodPutArchiveParams) SetPause(pause *bool) {
	o.Pause = pause
}

// WithRequest adds the request to the libpod put archive params
func (o *LibpodPutArchiveParams) WithRequest(request string) *LibpodPutArchiveParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the libpod put archive params
func (o *LibpodPutArchiveParams) SetRequest(request string) {
	o.Request = request
}

// WriteToRequest writes these params to a swagger request
func (o *LibpodPutArchiveParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// query param path
	qrPath := o.Path
	qPath := qrPath
	if qPath != "" {
		if err := r.SetQueryParam("path", qPath); err != nil {
			return err
		}
	}

	if o.Pause != nil {

		// query param pause
		var qrPause bool
		if o.Pause != nil {
			qrPause = *o.Pause
		}
		qPause := swag.FormatBool(qrPause)
		if qPause != "" {
			if err := r.SetQueryParam("pause", qPause); err != nil {
				return err
			}
		}

	}

	if err := r.SetBodyParam(o.Request); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
