// Code generated by go-swagger; DO NOT EDIT.

package containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LibpodCommitContainerReader is a Reader for the LibpodCommitContainer structure.
type LibpodCommitContainerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LibpodCommitContainerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewLibpodCommitContainerCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewLibpodCommitContainerNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLibpodCommitContainerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLibpodCommitContainerCreated creates a LibpodCommitContainerCreated with default headers values
func NewLibpodCommitContainerCreated() *LibpodCommitContainerCreated {
	return &LibpodCommitContainerCreated{}
}

/*LibpodCommitContainerCreated handles this case with default header values.

no error
*/
type LibpodCommitContainerCreated struct {
}

func (o *LibpodCommitContainerCreated) Error() string {
	return fmt.Sprintf("[POST /libpod/commit][%d] libpodCommitContainerCreated ", 201)
}

func (o *LibpodCommitContainerCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLibpodCommitContainerNotFound creates a LibpodCommitContainerNotFound with default headers values
func NewLibpodCommitContainerNotFound() *LibpodCommitContainerNotFound {
	return &LibpodCommitContainerNotFound{}
}

/*LibpodCommitContainerNotFound handles this case with default header values.

No such image
*/
type LibpodCommitContainerNotFound struct {
	Payload *LibpodCommitContainerNotFoundBody
}

func (o *LibpodCommitContainerNotFound) Error() string {
	return fmt.Sprintf("[POST /libpod/commit][%d] libpodCommitContainerNotFound  %+v", 404, o.Payload)
}

func (o *LibpodCommitContainerNotFound) GetPayload() *LibpodCommitContainerNotFoundBody {
	return o.Payload
}

func (o *LibpodCommitContainerNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodCommitContainerNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLibpodCommitContainerInternalServerError creates a LibpodCommitContainerInternalServerError with default headers values
func NewLibpodCommitContainerInternalServerError() *LibpodCommitContainerInternalServerError {
	return &LibpodCommitContainerInternalServerError{}
}

/*LibpodCommitContainerInternalServerError handles this case with default header values.

Internal server error
*/
type LibpodCommitContainerInternalServerError struct {
	Payload *LibpodCommitContainerInternalServerErrorBody
}

func (o *LibpodCommitContainerInternalServerError) Error() string {
	return fmt.Sprintf("[POST /libpod/commit][%d] libpodCommitContainerInternalServerError  %+v", 500, o.Payload)
}

func (o *LibpodCommitContainerInternalServerError) GetPayload() *LibpodCommitContainerInternalServerErrorBody {
	return o.Payload
}

func (o *LibpodCommitContainerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LibpodCommitContainerInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*LibpodCommitContainerInternalServerErrorBody libpod commit container internal server error body
swagger:model LibpodCommitContainerInternalServerErrorBody
*/
type LibpodCommitContainerInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this libpod commit container internal server error body
func (o *LibpodCommitContainerInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod commit container internal server error body based on context it is used
func (o *LibpodCommitContainerInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodCommitContainerInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodCommitContainerInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res LibpodCommitContainerInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*LibpodCommitContainerNotFoundBody libpod commit container not found body
swagger:model LibpodCommitContainerNotFoundBody
*/
type LibpodCommitContainerNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this libpod commit container not found body
func (o *LibpodCommitContainerNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this libpod commit container not found body based on context it is used
func (o *LibpodCommitContainerNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *LibpodCommitContainerNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LibpodCommitContainerNotFoundBody) UnmarshalBinary(b []byte) error {
	var res LibpodCommitContainerNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
