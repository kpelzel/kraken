// Code generated by go-swagger; DO NOT EDIT.

package images_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PushImageReader is a Reader for the PushImage structure.
type PushImageReader struct {
	formats strfmt.Registry
	writer  io.Writer
}

// ReadResponse reads a server response into the received o.
func (o *PushImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPushImageOK(o.writer)
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPushImageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPushImageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPushImageOK creates a PushImageOK with default headers values
func NewPushImageOK(writer io.Writer) *PushImageOK {
	return &PushImageOK{
		Payload: writer,
	}
}

/*PushImageOK handles this case with default header values.

no error
*/
type PushImageOK struct {
	Payload io.Writer
}

func (o *PushImageOK) Error() string {
	return fmt.Sprintf("[POST /images/{name:.*}/push][%d] pushImageOK  %+v", 200, o.Payload)
}

func (o *PushImageOK) GetPayload() io.Writer {
	return o.Payload
}

func (o *PushImageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPushImageNotFound creates a PushImageNotFound with default headers values
func NewPushImageNotFound() *PushImageNotFound {
	return &PushImageNotFound{}
}

/*PushImageNotFound handles this case with default header values.

No such image
*/
type PushImageNotFound struct {
	Payload *PushImageNotFoundBody
}

func (o *PushImageNotFound) Error() string {
	return fmt.Sprintf("[POST /images/{name:.*}/push][%d] pushImageNotFound  %+v", 404, o.Payload)
}

func (o *PushImageNotFound) GetPayload() *PushImageNotFoundBody {
	return o.Payload
}

func (o *PushImageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PushImageNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPushImageInternalServerError creates a PushImageInternalServerError with default headers values
func NewPushImageInternalServerError() *PushImageInternalServerError {
	return &PushImageInternalServerError{}
}

/*PushImageInternalServerError handles this case with default header values.

Internal server error
*/
type PushImageInternalServerError struct {
	Payload *PushImageInternalServerErrorBody
}

func (o *PushImageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /images/{name:.*}/push][%d] pushImageInternalServerError  %+v", 500, o.Payload)
}

func (o *PushImageInternalServerError) GetPayload() *PushImageInternalServerErrorBody {
	return o.Payload
}

func (o *PushImageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PushImageInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PushImageInternalServerErrorBody push image internal server error body
swagger:model PushImageInternalServerErrorBody
*/
type PushImageInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this push image internal server error body
func (o *PushImageInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this push image internal server error body based on context it is used
func (o *PushImageInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PushImageInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PushImageInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PushImageInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PushImageNotFoundBody push image not found body
swagger:model PushImageNotFoundBody
*/
type PushImageNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this push image not found body
func (o *PushImageNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this push image not found body based on context it is used
func (o *PushImageNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PushImageNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PushImageNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PushImageNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
