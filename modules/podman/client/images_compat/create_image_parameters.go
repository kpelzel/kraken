// Code generated by go-swagger; DO NOT EDIT.

package images_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCreateImageParams creates a new CreateImageParams object
// with the default values initialized.
func NewCreateImageParams() *CreateImageParams {
	var ()
	return &CreateImageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateImageParamsWithTimeout creates a new CreateImageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateImageParamsWithTimeout(timeout time.Duration) *CreateImageParams {
	var ()
	return &CreateImageParams{

		timeout: timeout,
	}
}

// NewCreateImageParamsWithContext creates a new CreateImageParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateImageParamsWithContext(ctx context.Context) *CreateImageParams {
	var ()
	return &CreateImageParams{

		Context: ctx,
	}
}

// NewCreateImageParamsWithHTTPClient creates a new CreateImageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateImageParamsWithHTTPClient(client *http.Client) *CreateImageParams {
	var ()
	return &CreateImageParams{
		HTTPClient: client,
	}
}

/*CreateImageParams contains all the parameters to send to the API endpoint
for the create image operation typically these are written to a http.Request
*/
type CreateImageParams struct {

	/*XRegistryAuth
	  A base64-encoded auth configuration.

	*/
	XRegistryAuth *string
	/*FromImage
	  needs description

	*/
	FromImage *string
	/*FromSrc
	  needs description

	*/
	FromSrc *string
	/*Request
	  Image content if fromSrc parameter was used

	*/
	Request string
	/*Tag
	  needs description

	*/
	Tag *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create image params
func (o *CreateImageParams) WithTimeout(timeout time.Duration) *CreateImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create image params
func (o *CreateImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create image params
func (o *CreateImageParams) WithContext(ctx context.Context) *CreateImageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create image params
func (o *CreateImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create image params
func (o *CreateImageParams) WithHTTPClient(client *http.Client) *CreateImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create image params
func (o *CreateImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXRegistryAuth adds the xRegistryAuth to the create image params
func (o *CreateImageParams) WithXRegistryAuth(xRegistryAuth *string) *CreateImageParams {
	o.SetXRegistryAuth(xRegistryAuth)
	return o
}

// SetXRegistryAuth adds the xRegistryAuth to the create image params
func (o *CreateImageParams) SetXRegistryAuth(xRegistryAuth *string) {
	o.XRegistryAuth = xRegistryAuth
}

// WithFromImage adds the fromImage to the create image params
func (o *CreateImageParams) WithFromImage(fromImage *string) *CreateImageParams {
	o.SetFromImage(fromImage)
	return o
}

// SetFromImage adds the fromImage to the create image params
func (o *CreateImageParams) SetFromImage(fromImage *string) {
	o.FromImage = fromImage
}

// WithFromSrc adds the fromSrc to the create image params
func (o *CreateImageParams) WithFromSrc(fromSrc *string) *CreateImageParams {
	o.SetFromSrc(fromSrc)
	return o
}

// SetFromSrc adds the fromSrc to the create image params
func (o *CreateImageParams) SetFromSrc(fromSrc *string) {
	o.FromSrc = fromSrc
}

// WithRequest adds the request to the create image params
func (o *CreateImageParams) WithRequest(request string) *CreateImageParams {
	o.SetRequest(request)
	return o
}

// SetRequest adds the request to the create image params
func (o *CreateImageParams) SetRequest(request string) {
	o.Request = request
}

// WithTag adds the tag to the create image params
func (o *CreateImageParams) WithTag(tag *string) *CreateImageParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the create image params
func (o *CreateImageParams) SetTag(tag *string) {
	o.Tag = tag
}

// WriteToRequest writes these params to a swagger request
func (o *CreateImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.XRegistryAuth != nil {

		// header param X-Registry-Auth
		if err := r.SetHeaderParam("X-Registry-Auth", *o.XRegistryAuth); err != nil {
			return err
		}

	}

	if o.FromImage != nil {

		// query param fromImage
		var qrFromImage string
		if o.FromImage != nil {
			qrFromImage = *o.FromImage
		}
		qFromImage := qrFromImage
		if qFromImage != "" {
			if err := r.SetQueryParam("fromImage", qFromImage); err != nil {
				return err
			}
		}

	}

	if o.FromSrc != nil {

		// query param fromSrc
		var qrFromSrc string
		if o.FromSrc != nil {
			qrFromSrc = *o.FromSrc
		}
		qFromSrc := qrFromSrc
		if qFromSrc != "" {
			if err := r.SetQueryParam("fromSrc", qFromSrc); err != nil {
				return err
			}
		}

	}

	if err := r.SetBodyParam(o.Request); err != nil {
		return err
	}

	if o.Tag != nil {

		// query param tag
		var qrTag string
		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {
			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
