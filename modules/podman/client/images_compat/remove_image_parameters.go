// Code generated by go-swagger; DO NOT EDIT.

package images_compat

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewRemoveImageParams creates a new RemoveImageParams object
// with the default values initialized.
func NewRemoveImageParams() *RemoveImageParams {
	var ()
	return &RemoveImageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveImageParamsWithTimeout creates a new RemoveImageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRemoveImageParamsWithTimeout(timeout time.Duration) *RemoveImageParams {
	var ()
	return &RemoveImageParams{

		timeout: timeout,
	}
}

// NewRemoveImageParamsWithContext creates a new RemoveImageParams object
// with the default values initialized, and the ability to set a context for a request
func NewRemoveImageParamsWithContext(ctx context.Context) *RemoveImageParams {
	var ()
	return &RemoveImageParams{

		Context: ctx,
	}
}

// NewRemoveImageParamsWithHTTPClient creates a new RemoveImageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRemoveImageParamsWithHTTPClient(client *http.Client) *RemoveImageParams {
	var ()
	return &RemoveImageParams{
		HTTPClient: client,
	}
}

/*RemoveImageParams contains all the parameters to send to the API endpoint
for the remove image operation typically these are written to a http.Request
*/
type RemoveImageParams struct {

	/*Force
	  remove the image even if used by containers or has other tags

	*/
	Force *bool
	/*Name
	  name or ID of image to delete

	*/
	Name string
	/*Noprune
	  not supported. will be logged as an invalid parameter if enabled

	*/
	Noprune *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the remove image params
func (o *RemoveImageParams) WithTimeout(timeout time.Duration) *RemoveImageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove image params
func (o *RemoveImageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove image params
func (o *RemoveImageParams) WithContext(ctx context.Context) *RemoveImageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove image params
func (o *RemoveImageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove image params
func (o *RemoveImageParams) WithHTTPClient(client *http.Client) *RemoveImageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove image params
func (o *RemoveImageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithForce adds the force to the remove image params
func (o *RemoveImageParams) WithForce(force *bool) *RemoveImageParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the remove image params
func (o *RemoveImageParams) SetForce(force *bool) {
	o.Force = force
}

// WithName adds the name to the remove image params
func (o *RemoveImageParams) WithName(name string) *RemoveImageParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the remove image params
func (o *RemoveImageParams) SetName(name string) {
	o.Name = name
}

// WithNoprune adds the noprune to the remove image params
func (o *RemoveImageParams) WithNoprune(noprune *bool) *RemoveImageParams {
	o.SetNoprune(noprune)
	return o
}

// SetNoprune adds the noprune to the remove image params
func (o *RemoveImageParams) SetNoprune(noprune *bool) {
	o.Noprune = noprune
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveImageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Force != nil {

		// query param force
		var qrForce bool
		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {
			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}

	}

	// path param name:.*
	if err := r.SetPathParam("name:.*", o.Name); err != nil {
		return err
	}

	if o.Noprune != nil {

		// query param noprune
		var qrNoprune bool
		if o.Noprune != nil {
			qrNoprune = *o.Noprune
		}
		qNoprune := swag.FormatBool(qrNoprune)
		if qNoprune != "" {
			if err := r.SetQueryParam("noprune", qNoprune); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
