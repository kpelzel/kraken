// Code generated by go-swagger; DO NOT EDIT.

package manifests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new manifests API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for manifests API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddManifest(params *AddManifestParams) (*AddManifestOK, error)

	Create(params *CreateParams) (*CreateOK, error)

	Inspect(params *InspectParams) (*InspectOK, error)

	PushManifest(params *PushManifestParams) (*PushManifestOK, error)

	RemoveManifest(params *RemoveManifestParams) (*RemoveManifestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddManifest Add an image to a manifest list
*/
func (a *Client) AddManifest(params *AddManifestParams) (*AddManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddManifestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddManifest",
		Method:             "POST",
		PathPattern:        "/libpod/manifests/{name:.*}/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddManifestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddManifestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddManifest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Create creates

  Create a manifest list
*/
func (a *Client) Create(params *CreateParams) (*CreateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Create",
		Method:             "POST",
		PathPattern:        "/libpod/manifests/create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Create: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Inspect inspects

  Display a manifest list
*/
func (a *Client) Inspect(params *InspectParams) (*InspectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInspectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Inspect",
		Method:             "GET",
		PathPattern:        "/libpod/manifests/{name:.*}/json",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InspectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*InspectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Inspect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PushManifest pushes

  Push a manifest list or image index to a registry
*/
func (a *Client) PushManifest(params *PushManifestParams) (*PushManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPushManifestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PushManifest",
		Method:             "POST",
		PathPattern:        "/libpod/manifests/{name}/push",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PushManifestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PushManifestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PushManifest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveManifest removes

  Remove an image from a manifest list
*/
func (a *Client) RemoveManifest(params *RemoveManifestParams) (*RemoveManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveManifestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RemoveManifest",
		Method:             "DELETE",
		PathPattern:        "/libpod/manifests/{name:.*}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json", "application/x-tar"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RemoveManifestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveManifestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RemoveManifest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
