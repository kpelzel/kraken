// Code generated by go-swagger; DO NOT EDIT.

package manifests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewRemoveManifestParams creates a new RemoveManifestParams object
// with the default values initialized.
func NewRemoveManifestParams() *RemoveManifestParams {
	var ()
	return &RemoveManifestParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRemoveManifestParamsWithTimeout creates a new RemoveManifestParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRemoveManifestParamsWithTimeout(timeout time.Duration) *RemoveManifestParams {
	var ()
	return &RemoveManifestParams{

		timeout: timeout,
	}
}

// NewRemoveManifestParamsWithContext creates a new RemoveManifestParams object
// with the default values initialized, and the ability to set a context for a request
func NewRemoveManifestParamsWithContext(ctx context.Context) *RemoveManifestParams {
	var ()
	return &RemoveManifestParams{

		Context: ctx,
	}
}

// NewRemoveManifestParamsWithHTTPClient creates a new RemoveManifestParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRemoveManifestParamsWithHTTPClient(client *http.Client) *RemoveManifestParams {
	var ()
	return &RemoveManifestParams{
		HTTPClient: client,
	}
}

/*RemoveManifestParams contains all the parameters to send to the API endpoint
for the remove manifest operation typically these are written to a http.Request
*/
type RemoveManifestParams struct {

	/*Digest
	  image digest to be removed

	*/
	Digest *string
	/*Name
	  the image associated with the manifest

	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the remove manifest params
func (o *RemoveManifestParams) WithTimeout(timeout time.Duration) *RemoveManifestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the remove manifest params
func (o *RemoveManifestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the remove manifest params
func (o *RemoveManifestParams) WithContext(ctx context.Context) *RemoveManifestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the remove manifest params
func (o *RemoveManifestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the remove manifest params
func (o *RemoveManifestParams) WithHTTPClient(client *http.Client) *RemoveManifestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the remove manifest params
func (o *RemoveManifestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDigest adds the digest to the remove manifest params
func (o *RemoveManifestParams) WithDigest(digest *string) *RemoveManifestParams {
	o.SetDigest(digest)
	return o
}

// SetDigest adds the digest to the remove manifest params
func (o *RemoveManifestParams) SetDigest(digest *string) {
	o.Digest = digest
}

// WithName adds the name to the remove manifest params
func (o *RemoveManifestParams) WithName(name string) *RemoveManifestParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the remove manifest params
func (o *RemoveManifestParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *RemoveManifestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Digest != nil {

		// query param digest
		var qrDigest string
		if o.Digest != nil {
			qrDigest = *o.Digest
		}
		qDigest := qrDigest
		if qDigest != "" {
			if err := r.SetQueryParam("digest", qDigest); err != nil {
				return err
			}
		}

	}

	// path param name:.*
	if err := r.SetPathParam("name:.*", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
