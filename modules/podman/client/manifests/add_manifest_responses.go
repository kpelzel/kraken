// Code generated by go-swagger; DO NOT EDIT.

package manifests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AddManifestReader is a Reader for the AddManifest structure.
type AddManifestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddManifestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddManifestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewAddManifestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewAddManifestConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddManifestInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddManifestOK creates a AddManifestOK with default headers values
func NewAddManifestOK() *AddManifestOK {
	return &AddManifestOK{}
}

/*AddManifestOK handles this case with default header values.

AddManifestOK add manifest o k
*/
type AddManifestOK struct {
}

func (o *AddManifestOK) Error() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name:.*}/add][%d] addManifestOK ", 200)
}

func (o *AddManifestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAddManifestNotFound creates a AddManifestNotFound with default headers values
func NewAddManifestNotFound() *AddManifestNotFound {
	return &AddManifestNotFound{}
}

/*AddManifestNotFound handles this case with default header values.

No such manifest
*/
type AddManifestNotFound struct {
	Payload *AddManifestNotFoundBody
}

func (o *AddManifestNotFound) Error() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name:.*}/add][%d] addManifestNotFound  %+v", 404, o.Payload)
}

func (o *AddManifestNotFound) GetPayload() *AddManifestNotFoundBody {
	return o.Payload
}

func (o *AddManifestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddManifestNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddManifestConflict creates a AddManifestConflict with default headers values
func NewAddManifestConflict() *AddManifestConflict {
	return &AddManifestConflict{}
}

/*AddManifestConflict handles this case with default header values.

Bad parameter in request
*/
type AddManifestConflict struct {
	Payload *AddManifestConflictBody
}

func (o *AddManifestConflict) Error() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name:.*}/add][%d] addManifestConflict  %+v", 409, o.Payload)
}

func (o *AddManifestConflict) GetPayload() *AddManifestConflictBody {
	return o.Payload
}

func (o *AddManifestConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddManifestConflictBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddManifestInternalServerError creates a AddManifestInternalServerError with default headers values
func NewAddManifestInternalServerError() *AddManifestInternalServerError {
	return &AddManifestInternalServerError{}
}

/*AddManifestInternalServerError handles this case with default header values.

Internal server error
*/
type AddManifestInternalServerError struct {
	Payload *AddManifestInternalServerErrorBody
}

func (o *AddManifestInternalServerError) Error() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name:.*}/add][%d] addManifestInternalServerError  %+v", 500, o.Payload)
}

func (o *AddManifestInternalServerError) GetPayload() *AddManifestInternalServerErrorBody {
	return o.Payload
}

func (o *AddManifestInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(AddManifestInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*AddManifestConflictBody add manifest conflict body
swagger:model AddManifestConflictBody
*/
type AddManifestConflictBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this add manifest conflict body
func (o *AddManifestConflictBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add manifest conflict body based on context it is used
func (o *AddManifestConflictBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddManifestConflictBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddManifestConflictBody) UnmarshalBinary(b []byte) error {
	var res AddManifestConflictBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddManifestInternalServerErrorBody add manifest internal server error body
swagger:model AddManifestInternalServerErrorBody
*/
type AddManifestInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this add manifest internal server error body
func (o *AddManifestInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add manifest internal server error body based on context it is used
func (o *AddManifestInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddManifestInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddManifestInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res AddManifestInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*AddManifestNotFoundBody add manifest not found body
swagger:model AddManifestNotFoundBody
*/
type AddManifestNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this add manifest not found body
func (o *AddManifestNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this add manifest not found body based on context it is used
func (o *AddManifestNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *AddManifestNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *AddManifestNotFoundBody) UnmarshalBinary(b []byte) error {
	var res AddManifestNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
