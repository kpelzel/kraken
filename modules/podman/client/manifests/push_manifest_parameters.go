// Code generated by go-swagger; DO NOT EDIT.

package manifests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewPushManifestParams creates a new PushManifestParams object
// with the default values initialized.
func NewPushManifestParams() *PushManifestParams {
	var ()
	return &PushManifestParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPushManifestParamsWithTimeout creates a new PushManifestParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPushManifestParamsWithTimeout(timeout time.Duration) *PushManifestParams {
	var ()
	return &PushManifestParams{

		timeout: timeout,
	}
}

// NewPushManifestParamsWithContext creates a new PushManifestParams object
// with the default values initialized, and the ability to set a context for a request
func NewPushManifestParamsWithContext(ctx context.Context) *PushManifestParams {
	var ()
	return &PushManifestParams{

		Context: ctx,
	}
}

// NewPushManifestParamsWithHTTPClient creates a new PushManifestParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPushManifestParamsWithHTTPClient(client *http.Client) *PushManifestParams {
	var ()
	return &PushManifestParams{
		HTTPClient: client,
	}
}

/*PushManifestParams contains all the parameters to send to the API endpoint
for the push manifest operation typically these are written to a http.Request
*/
type PushManifestParams struct {

	/*All
	  push all images

	*/
	All *bool
	/*Destination
	  the destination for the manifest

	*/
	Destination string
	/*Name
	  the name or ID of the manifest

	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the push manifest params
func (o *PushManifestParams) WithTimeout(timeout time.Duration) *PushManifestParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the push manifest params
func (o *PushManifestParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the push manifest params
func (o *PushManifestParams) WithContext(ctx context.Context) *PushManifestParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the push manifest params
func (o *PushManifestParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the push manifest params
func (o *PushManifestParams) WithHTTPClient(client *http.Client) *PushManifestParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the push manifest params
func (o *PushManifestParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAll adds the all to the push manifest params
func (o *PushManifestParams) WithAll(all *bool) *PushManifestParams {
	o.SetAll(all)
	return o
}

// SetAll adds the all to the push manifest params
func (o *PushManifestParams) SetAll(all *bool) {
	o.All = all
}

// WithDestination adds the destination to the push manifest params
func (o *PushManifestParams) WithDestination(destination string) *PushManifestParams {
	o.SetDestination(destination)
	return o
}

// SetDestination adds the destination to the push manifest params
func (o *PushManifestParams) SetDestination(destination string) {
	o.Destination = destination
}

// WithName adds the name to the push manifest params
func (o *PushManifestParams) WithName(name string) *PushManifestParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the push manifest params
func (o *PushManifestParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *PushManifestParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.All != nil {

		// query param all
		var qrAll bool
		if o.All != nil {
			qrAll = *o.All
		}
		qAll := swag.FormatBool(qrAll)
		if qAll != "" {
			if err := r.SetQueryParam("all", qAll); err != nil {
				return err
			}
		}

	}

	// query param destination
	qrDestination := o.Destination
	qDestination := qrDestination
	if qDestination != "" {
		if err := r.SetQueryParam("destination", qDestination); err != nil {
			return err
		}
	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
