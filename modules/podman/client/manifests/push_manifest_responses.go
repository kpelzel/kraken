// Code generated by go-swagger; DO NOT EDIT.

package manifests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PushManifestReader is a Reader for the PushManifest structure.
type PushManifestReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PushManifestReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPushManifestOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPushManifestBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPushManifestNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPushManifestInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPushManifestOK creates a PushManifestOK with default headers values
func NewPushManifestOK() *PushManifestOK {
	return &PushManifestOK{}
}

/*PushManifestOK handles this case with default header values.

PushManifestOK push manifest o k
*/
type PushManifestOK struct {
}

func (o *PushManifestOK) Error() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name}/push][%d] pushManifestOK ", 200)
}

func (o *PushManifestOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPushManifestBadRequest creates a PushManifestBadRequest with default headers values
func NewPushManifestBadRequest() *PushManifestBadRequest {
	return &PushManifestBadRequest{}
}

/*PushManifestBadRequest handles this case with default header values.

Bad parameter in request
*/
type PushManifestBadRequest struct {
	Payload *PushManifestBadRequestBody
}

func (o *PushManifestBadRequest) Error() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name}/push][%d] pushManifestBadRequest  %+v", 400, o.Payload)
}

func (o *PushManifestBadRequest) GetPayload() *PushManifestBadRequestBody {
	return o.Payload
}

func (o *PushManifestBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PushManifestBadRequestBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPushManifestNotFound creates a PushManifestNotFound with default headers values
func NewPushManifestNotFound() *PushManifestNotFound {
	return &PushManifestNotFound{}
}

/*PushManifestNotFound handles this case with default header values.

No such manifest
*/
type PushManifestNotFound struct {
	Payload *PushManifestNotFoundBody
}

func (o *PushManifestNotFound) Error() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name}/push][%d] pushManifestNotFound  %+v", 404, o.Payload)
}

func (o *PushManifestNotFound) GetPayload() *PushManifestNotFoundBody {
	return o.Payload
}

func (o *PushManifestNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PushManifestNotFoundBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPushManifestInternalServerError creates a PushManifestInternalServerError with default headers values
func NewPushManifestInternalServerError() *PushManifestInternalServerError {
	return &PushManifestInternalServerError{}
}

/*PushManifestInternalServerError handles this case with default header values.

Internal server error
*/
type PushManifestInternalServerError struct {
	Payload *PushManifestInternalServerErrorBody
}

func (o *PushManifestInternalServerError) Error() string {
	return fmt.Sprintf("[POST /libpod/manifests/{name}/push][%d] pushManifestInternalServerError  %+v", 500, o.Payload)
}

func (o *PushManifestInternalServerError) GetPayload() *PushManifestInternalServerErrorBody {
	return o.Payload
}

func (o *PushManifestInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(PushManifestInternalServerErrorBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PushManifestBadRequestBody push manifest bad request body
swagger:model PushManifestBadRequestBody
*/
type PushManifestBadRequestBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this push manifest bad request body
func (o *PushManifestBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this push manifest bad request body based on context it is used
func (o *PushManifestBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PushManifestBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PushManifestBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PushManifestBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PushManifestInternalServerErrorBody push manifest internal server error body
swagger:model PushManifestInternalServerErrorBody
*/
type PushManifestInternalServerErrorBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this push manifest internal server error body
func (o *PushManifestInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this push manifest internal server error body based on context it is used
func (o *PushManifestInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PushManifestInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PushManifestInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PushManifestInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*PushManifestNotFoundBody push manifest not found body
swagger:model PushManifestNotFoundBody
*/
type PushManifestNotFoundBody struct {

	// API root cause formatted for automated parsing
	// Example: API root cause
	Because string `json:"cause,omitempty"`

	// human error message, formatted for a human to read
	// Example: human error message
	Message string `json:"message,omitempty"`

	// http response code
	ResponseCode int64 `json:"response,omitempty"`
}

// Validate validates this push manifest not found body
func (o *PushManifestNotFoundBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this push manifest not found body based on context it is used
func (o *PushManifestNotFoundBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PushManifestNotFoundBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PushManifestNotFoundBody) UnmarshalBinary(b []byte) error {
	var res PushManifestNotFoundBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
