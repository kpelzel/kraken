// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkConfig NetworkConfig configures the network namespace for the container
//
// swagger:model NetworkConfig
type NetworkConfig struct {

	// DNS opt
	DNSOpt []string `json:"DNSOpt"`

	// DNS search
	DNSSearch []string `json:"DNSSearch"`

	// DNS servers
	DNSServers []string `json:"DNSServers"`

	// exposed ports
	ExposedPorts map[string]interface{} `json:"ExposedPorts,omitempty"`

	// HTTP proxy
	HTTPProxy bool `json:"HTTPProxy,omitempty"`

	// IP 6 address
	IP6Address string `json:"IP6Address,omitempty"`

	// IP address
	IPAddress string `json:"IPAddress,omitempty"`

	// link local IP
	LinkLocalIP []string `json:"LinkLocalIP"`

	// mac address
	MacAddress string `json:"MacAddress,omitempty"`

	// net mode
	NetMode NetworkMode `json:"NetMode,omitempty"`

	// network
	Network string `json:"Network,omitempty"`

	// network alias
	NetworkAlias []string `json:"NetworkAlias"`

	// port bindings
	PortBindings PortMap `json:"PortBindings,omitempty"`

	// publish
	Publish []string `json:"Publish"`

	// publish all
	PublishAll bool `json:"PublishAll,omitempty"`
}

// Validate validates this network config
func (m *NetworkConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortBindings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkConfig) validateNetMode(formats strfmt.Registry) error {
	if swag.IsZero(m.NetMode) { // not required
		return nil
	}

	if err := m.NetMode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("NetMode")
		}
		return err
	}

	return nil
}

func (m *NetworkConfig) validatePortBindings(formats strfmt.Registry) error {
	if swag.IsZero(m.PortBindings) { // not required
		return nil
	}

	if m.PortBindings != nil {
		if err := m.PortBindings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PortBindings")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network config based on the context it is used
func (m *NetworkConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetMode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePortBindings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkConfig) contextValidateNetMode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.NetMode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("NetMode")
		}
		return err
	}

	return nil
}

func (m *NetworkConfig) contextValidatePortBindings(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PortBindings.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PortBindings")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkConfig) UnmarshalBinary(b []byte) error {
	var res NetworkConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
