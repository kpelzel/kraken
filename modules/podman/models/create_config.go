// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateConfig CreateConfig is a pre OCI spec structure.  It represents user input from varlink or the CLI
//
// swagger:model CreateConfig
type CreateConfig struct {

	// annotations
	Annotations map[string]string `json:"Annotations,omitempty"`

	// args
	Args []string `json:"Args"`

	// builtin img volumes
	BuiltinImgVolumes map[string]interface{} `json:"BuiltinImgVolumes,omitempty"`

	// cgroup
	Cgroup *CgroupConfig `json:"Cgroup,omitempty"`

	// cid file
	CidFile string `json:"CidFile,omitempty"`

	// command
	Command []string `json:"Command"`

	// conmon pid file
	ConmonPidFile string `json:"ConmonPidFile,omitempty"`

	// detach
	Detach bool `json:"Detach,omitempty"`

	// devices
	Devices []string `json:"Devices"`

	// entrypoint
	Entrypoint []string `json:"Entrypoint"`

	// env
	Env map[string]string `json:"Env,omitempty"`

	// health check
	HealthCheck *Schema2HealthConfig `json:"HealthCheck,omitempty"`

	// image
	Image string `json:"Image,omitempty"`

	// image ID
	ImageID string `json:"ImageID,omitempty"`

	// image volume type
	ImageVolumeType string `json:"ImageVolumeType,omitempty"`

	// init
	Init bool `json:"Init,omitempty"`

	// init path
	InitPath string `json:"InitPath,omitempty"`

	// interactive
	Interactive bool `json:"Interactive,omitempty"`

	// ipc
	Ipc *IpcConfig `json:"Ipc,omitempty"`

	// labels
	Labels map[string]string `json:"Labels,omitempty"`

	// log driver
	LogDriver string `json:"LogDriver,omitempty"`

	// log driver opt
	LogDriverOpt []string `json:"LogDriverOpt"`

	// mounts
	Mounts []*Mount `json:"Mounts"`

	// mounts flag
	MountsFlag []string `json:"MountsFlag"`

	// name
	Name string `json:"Name,omitempty"`

	// named volumes
	NamedVolumes []*ContainerNamedVolume `json:"NamedVolumes"`

	// network
	Network *NetworkConfig `json:"Network,omitempty"`

	// pid
	Pid *PidConfig `json:"Pid,omitempty"`

	// pod
	Pod string `json:"Pod,omitempty"`

	// podman path
	PodmanPath string `json:"PodmanPath,omitempty"`

	// quiet
	Quiet bool `json:"Quiet,omitempty"`

	// raw image name
	RawImageName string `json:"RawImageName,omitempty"`

	// resources
	Resources *CreateResourceConfig `json:"Resources,omitempty"`

	// restart policy
	RestartPolicy string `json:"RestartPolicy,omitempty"`

	// rm
	Rm bool `json:"Rm,omitempty"`

	// rmi
	Rmi bool `json:"Rmi,omitempty"`

	// rootfs
	Rootfs string `json:"Rootfs,omitempty"`

	// security
	Security *SecurityConfig `json:"Security,omitempty"`

	// stop signal
	StopSignal Signal `json:"StopSignal,omitempty"`

	// stop timeout
	StopTimeout uint64 `json:"StopTimeout,omitempty"`

	// syslog
	Syslog bool `json:"Syslog,omitempty"`

	// systemd
	Systemd bool `json:"Systemd,omitempty"`

	// tmpfs
	Tmpfs []string `json:"Tmpfs"`

	// tty
	Tty bool `json:"Tty,omitempty"`

	// user
	User *UserConfig `json:"User,omitempty"`

	// user command
	UserCommand []string `json:"UserCommand"`

	// uts
	Uts *UtsConfig `json:"Uts,omitempty"`

	// volumes
	Volumes []string `json:"Volumes"`

	// volumes from
	VolumesFrom []string `json:"VolumesFrom"`

	// work dir
	WorkDir string `json:"WorkDir,omitempty"`
}

// Validate validates this create config
func (m *CreateConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCgroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHealthCheck(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIpc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamedVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopSignal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateConfig) validateCgroup(formats strfmt.Registry) error {
	if swag.IsZero(m.Cgroup) { // not required
		return nil
	}

	if m.Cgroup != nil {
		if err := m.Cgroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Cgroup")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) validateHealthCheck(formats strfmt.Registry) error {
	if swag.IsZero(m.HealthCheck) { // not required
		return nil
	}

	if m.HealthCheck != nil {
		if err := m.HealthCheck.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HealthCheck")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) validateIpc(formats strfmt.Registry) error {
	if swag.IsZero(m.Ipc) { // not required
		return nil
	}

	if m.Ipc != nil {
		if err := m.Ipc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Ipc")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) validateMounts(formats strfmt.Registry) error {
	if swag.IsZero(m.Mounts) { // not required
		return nil
	}

	for i := 0; i < len(m.Mounts); i++ {
		if swag.IsZero(m.Mounts[i]) { // not required
			continue
		}

		if m.Mounts[i] != nil {
			if err := m.Mounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Mounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateConfig) validateNamedVolumes(formats strfmt.Registry) error {
	if swag.IsZero(m.NamedVolumes) { // not required
		return nil
	}

	for i := 0; i < len(m.NamedVolumes); i++ {
		if swag.IsZero(m.NamedVolumes[i]) { // not required
			continue
		}

		if m.NamedVolumes[i] != nil {
			if err := m.NamedVolumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NamedVolumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateConfig) validateNetwork(formats strfmt.Registry) error {
	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Network")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) validatePid(formats strfmt.Registry) error {
	if swag.IsZero(m.Pid) { // not required
		return nil
	}

	if m.Pid != nil {
		if err := m.Pid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Pid")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) validateResources(formats strfmt.Registry) error {
	if swag.IsZero(m.Resources) { // not required
		return nil
	}

	if m.Resources != nil {
		if err := m.Resources.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Resources")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) validateSecurity(formats strfmt.Registry) error {
	if swag.IsZero(m.Security) { // not required
		return nil
	}

	if m.Security != nil {
		if err := m.Security.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Security")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) validateStopSignal(formats strfmt.Registry) error {
	if swag.IsZero(m.StopSignal) { // not required
		return nil
	}

	if err := m.StopSignal.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("StopSignal")
		}
		return err
	}

	return nil
}

func (m *CreateConfig) validateUser(formats strfmt.Registry) error {
	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("User")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) validateUts(formats strfmt.Registry) error {
	if swag.IsZero(m.Uts) { // not required
		return nil
	}

	if m.Uts != nil {
		if err := m.Uts.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Uts")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create config based on the context it is used
func (m *CreateConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCgroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHealthCheck(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIpc(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNamedVolumes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetwork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePid(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStopSignal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateConfig) contextValidateCgroup(ctx context.Context, formats strfmt.Registry) error {

	if m.Cgroup != nil {
		if err := m.Cgroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Cgroup")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) contextValidateHealthCheck(ctx context.Context, formats strfmt.Registry) error {

	if m.HealthCheck != nil {
		if err := m.HealthCheck.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HealthCheck")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) contextValidateIpc(ctx context.Context, formats strfmt.Registry) error {

	if m.Ipc != nil {
		if err := m.Ipc.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Ipc")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) contextValidateMounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Mounts); i++ {

		if m.Mounts[i] != nil {
			if err := m.Mounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Mounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateConfig) contextValidateNamedVolumes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NamedVolumes); i++ {

		if m.NamedVolumes[i] != nil {
			if err := m.NamedVolumes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("NamedVolumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateConfig) contextValidateNetwork(ctx context.Context, formats strfmt.Registry) error {

	if m.Network != nil {
		if err := m.Network.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Network")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) contextValidatePid(ctx context.Context, formats strfmt.Registry) error {

	if m.Pid != nil {
		if err := m.Pid.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Pid")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) contextValidateResources(ctx context.Context, formats strfmt.Registry) error {

	if m.Resources != nil {
		if err := m.Resources.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Resources")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) contextValidateSecurity(ctx context.Context, formats strfmt.Registry) error {

	if m.Security != nil {
		if err := m.Security.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Security")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) contextValidateStopSignal(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StopSignal.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("StopSignal")
		}
		return err
	}

	return nil
}

func (m *CreateConfig) contextValidateUser(ctx context.Context, formats strfmt.Registry) error {

	if m.User != nil {
		if err := m.User.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("User")
			}
			return err
		}
	}

	return nil
}

func (m *CreateConfig) contextValidateUts(ctx context.Context, formats strfmt.Registry) error {

	if m.Uts != nil {
		if err := m.Uts.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Uts")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateConfig) UnmarshalBinary(b []byte) error {
	var res CreateConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
