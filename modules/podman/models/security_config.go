// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SecurityConfig SecurityConfig configures the security features for the container
//
// swagger:model SecurityConfig
type SecurityConfig struct {

	// apparmor profile
	ApparmorProfile string `json:"ApparmorProfile,omitempty"`

	// cap add
	CapAdd []string `json:"CapAdd"`

	// cap drop
	CapDrop []string `json:"CapDrop"`

	// cap required
	CapRequired []string `json:"CapRequired"`

	// label opts
	LabelOpts []string `json:"LabelOpts"`

	// no new privs
	NoNewPrivs bool `json:"NoNewPrivs,omitempty"`

	// privileged
	Privileged bool `json:"Privileged,omitempty"`

	// proc opts
	ProcOpts []string `json:"ProcOpts"`

	// read only rootfs
	ReadOnlyRootfs bool `json:"ReadOnlyRootfs,omitempty"`

	// read only tmpfs
	ReadOnlyTmpfs bool `json:"ReadOnlyTmpfs,omitempty"`

	// seccomp policy
	SeccompPolicy Policy `json:"SeccompPolicy,omitempty"`

	// seccomp profile from image
	SeccompProfileFromImage string `json:"SeccompProfileFromImage,omitempty"`

	// seccomp profile path
	SeccompProfilePath string `json:"SeccompProfilePath,omitempty"`

	// security opts
	SecurityOpts []string `json:"SecurityOpts"`

	// sysctl
	Sysctl map[string]string `json:"Sysctl,omitempty"`
}

// Validate validates this security config
func (m *SecurityConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeccompPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfig) validateSeccompPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.SeccompPolicy) { // not required
		return nil
	}

	if err := m.SeccompPolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SeccompPolicy")
		}
		return err
	}

	return nil
}

// ContextValidate validate this security config based on the context it is used
func (m *SecurityConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSeccompPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityConfig) contextValidateSeccompPolicy(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SeccompPolicy.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SeccompPolicy")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityConfig) UnmarshalBinary(b []byte) error {
	var res SecurityConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
