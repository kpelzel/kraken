// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeInfo VolumeInfo Volume list response
//
// swagger:model VolumeInfo
type VolumeInfo struct {

	// Date/Time the volume was created.
	CreatedAt string `json:"CreatedAt,omitempty"`

	// Name of the volume driver used by the volume. Only supports local driver
	// Required: true
	Driver *string `json:"Driver"`

	// User-defined key/value metadata.
	// Always included
	Labels map[string]string `json:"Labels,omitempty"`

	// Mount path of the volume on the host.
	// Required: true
	Mountpoint *string `json:"Mountpoint"`

	// Name of the volume.
	// Required: true
	Name *string `json:"Name"`

	// The driver specific options used when creating the volume.
	// Required: true
	Options map[string]string `json:"Options"`

	// The level at which the volume exists.
	// Libpod does not implement volume scoping, and this is provided solely for
	// Docker compatibility. The value is only "local".
	// Required: true
	Scope *string `json:"Scope"`
}

// Validate validates this volume info
func (m *VolumeInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDriver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeInfo) validateDriver(formats strfmt.Registry) error {

	if err := validate.Required("Driver", "body", m.Driver); err != nil {
		return err
	}

	return nil
}

func (m *VolumeInfo) validateMountpoint(formats strfmt.Registry) error {

	if err := validate.Required("Mountpoint", "body", m.Mountpoint); err != nil {
		return err
	}

	return nil
}

func (m *VolumeInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VolumeInfo) validateOptions(formats strfmt.Registry) error {

	if err := validate.Required("Options", "body", m.Options); err != nil {
		return err
	}

	return nil
}

func (m *VolumeInfo) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("Scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this volume info based on context it is used
func (m *VolumeInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VolumeInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeInfo) UnmarshalBinary(b []byte) error {
	var res VolumeInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
